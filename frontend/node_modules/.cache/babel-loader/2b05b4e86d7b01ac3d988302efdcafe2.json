{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\ThreadsPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport { Link } from 'react-router-dom';\nimport CreateThread from './CreateThread'; // Ensure this import is correct\n\nimport './css/ThreadsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreadsPage = () => {\n  _s();\n\n  const [threads, setThreads] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n\n  const fetchThreads = async () => {\n    setLoading(true);\n\n    try {\n      const response = await axios.get('/api/threads');\n      setThreads(response.data);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching threads:', err);\n      setError('Failed to fetch threads. Please try again later.');\n      setLoading(false);\n    }\n  };\n\n  const handleThreadCreated = newThread => {\n    setThreads(prevThreads => [newThread, ...prevThreads]);\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading threads...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threads-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forum Threads\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreateThread, {\n      onThreadCreated: handleThreadCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), threads.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No threads found. Be the first to create a thread!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list\",\n      children: threads.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread-item\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/thread/${thread._id}`,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: thread.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Created by: \", thread.user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Posts: \", thread.postCount || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this)]\n      }, thread._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThreadsPage, \"176PDi5m4uWjlo2O6YaXAVCBr8s=\");\n\n_c = ThreadsPage;\nexport default ThreadsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadsPage\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/ThreadsPage.jsx"],"names":["React","useState","useEffect","axios","Link","CreateThread","ThreadsPage","threads","setThreads","loading","setLoading","error","setError","fetchThreads","response","get","data","err","console","handleThreadCreated","newThread","prevThreads","length","map","thread","_id","title","user","postCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAA2C;;AAC3C,OAAO,uBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,YAAY;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,YAAY,GAAG,YAAY;AAC7BH,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,cAAV,CAAvB;AACAP,MAAAA,UAAU,CAACM,QAAQ,CAACE,IAAV,CAAV;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,CAIE,OAAOO,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACP,KAAR,CAAc,yBAAd,EAAyCM,GAAzC;AACAL,MAAAA,QAAQ,CAAC,kDAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAXD;;AAaA,QAAMS,mBAAmB,GAAIC,SAAD,IAAe;AACvCZ,IAAAA,UAAU,CAACa,WAAW,IAAI,CAACD,SAAD,EAAY,GAAGC,WAAf,CAAhB,CAAV;AACH,GAFD;;AAIA,MAAIZ,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIE,KAAJ,EAAW,oBAAO;AAAA,0BAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAAc,MAAA,eAAe,EAAEQ;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKZ,OAAO,CAACe,MAAR,KAAmB,CAAnB,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,gBAGG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKf,OAAO,CAACgB,GAAR,CAAYC,MAAM,iBACf;AAAsB,QAAA,SAAS,EAAC,aAAhC;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,WAAUA,MAAM,CAACC,GAAI,EAAhC;AAAA,iCACI;AAAA,sBAAKD,MAAM,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA,qCAAgBF,MAAM,CAACG,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,gCAAWH,MAAM,CAACI,SAAP,IAAoB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA,SAAUJ,MAAM,CAACC,GAAjB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YANR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAlDD;;GAAMnB,W;;KAAAA,W;AAoDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from '../axios';\r\nimport { Link } from 'react-router-dom';\r\nimport CreateThread from './CreateThread'; // Ensure this import is correct\r\nimport './css/ThreadsPage.css';\r\n\r\nconst ThreadsPage = () => {\r\n    const [threads, setThreads] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchThreads();\r\n    }, []);\r\n\r\n    const fetchThreads = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await axios.get('/api/threads');\r\n            setThreads(response.data);\r\n            setLoading(false);\r\n        } catch (err) {\r\n            console.error('Error fetching threads:', err);\r\n            setError('Failed to fetch threads. Please try again later.');\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleThreadCreated = (newThread) => {\r\n        setThreads(prevThreads => [newThread, ...prevThreads]);\r\n    };\r\n\r\n    if (loading) return <div>Loading threads...</div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n        <div className=\"threads-page\">\r\n            <h1>Forum Threads</h1>\r\n            <CreateThread onThreadCreated={handleThreadCreated} />\r\n            {threads.length === 0 ? (\r\n                <p>No threads found. Be the first to create a thread!</p>\r\n            ) : (\r\n                <div className=\"thread-list\">\r\n                    {threads.map(thread => (\r\n                        <div key={thread._id} className=\"thread-item\">\r\n                            <Link to={`/thread/${thread._id}`}>\r\n                                <h2>{thread.title}</h2>\r\n                            </Link>\r\n                            <p>Created by: {thread.user}</p>\r\n                            <p>Posts: {thread.postCount || 0}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThreadsPage;"]},"metadata":{},"sourceType":"module"}