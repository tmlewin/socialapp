{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\Inbox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport './css/Inbox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Inbox() {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const fetchInbox = async () => {\n      try {\n        const response = await axios.get('/api/messages/inbox');\n        setMessages(response.data);\n      } catch (error) {\n        console.error('Error fetching inbox messages:', error);\n      }\n    };\n\n    fetchInbox();\n  }, []);\n\n  const markAsRead = async messageId => {\n    try {\n      await axios.patch(`/api/messages/${messageId}/read`);\n      setMessages(messages.map(msg => msg._id === messageId ? { ...msg,\n        read: true\n      } : msg));\n    } catch (error) {\n      console.error('Error marking message as read:', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Inbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"message-list\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `message-item ${message.read ? 'read' : 'unread'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sender\",\n            children: message.sender.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"date\",\n            children: new Date(message.createdAt).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-subject\",\n          children: message.subject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-preview\",\n          children: [message.content.substring(0, 100), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), !message.read && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => markAsRead(message._id),\n          children: \"Mark as Read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Inbox, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n\n_c = Inbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inbox\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/Inbox.jsx"],"names":["React","useState","useEffect","axios","Inbox","messages","setMessages","fetchInbox","response","get","data","error","console","markAsRead","messageId","patch","map","msg","_id","read","message","sender","username","Date","createdAt","toLocaleString","subject","content","substring"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,iBAAP;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMK,UAAU,GAAG,YAAY;AAC3B,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,qBAAV,CAAvB;AACAH,QAAAA,WAAW,CAACE,QAAQ,CAACE,IAAV,CAAX;AACH,OAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACH;AACJ,KAPD;;AASAJ,IAAAA,UAAU;AACb,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMM,UAAU,GAAG,MAAOC,SAAP,IAAqB;AACpC,QAAI;AACA,YAAMX,KAAK,CAACY,KAAN,CAAa,iBAAgBD,SAAU,OAAvC,CAAN;AACAR,MAAAA,WAAW,CAACD,QAAQ,CAACW,GAAT,CAAaC,GAAG,IACxBA,GAAG,CAACC,GAAJ,KAAYJ,SAAZ,GAAwB,EAAE,GAAGG,GAAL;AAAUE,QAAAA,IAAI,EAAE;AAAhB,OAAxB,GAAiDF,GADzC,CAAD,CAAX;AAGH,KALD,CAKE,OAAON,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACH;AACJ,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,SAAS,EAAC,cAAd;AAAA,gBACKN,QAAQ,CAACW,GAAT,CAAaI,OAAO,iBACjB;AAAsB,QAAA,SAAS,EAAG,gBAAeA,OAAO,CAACD,IAAR,GAAe,MAAf,GAAwB,QAAS,EAAlF;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,sBAA0BC,OAAO,CAACC,MAAR,CAAeC;AAAzC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAA,sBAAwB,IAAIC,IAAJ,CAASH,OAAO,CAACI,SAAjB,EAA4BC,cAA5B;AAAxB;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,oBAAkCL,OAAO,CAACM;AAA1C;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,qBAAkCN,OAAO,CAACO,OAAR,CAAgBC,SAAhB,CAA0B,CAA1B,EAA6B,GAA7B,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,EAOK,CAACR,OAAO,CAACD,IAAT,iBACG;AAAQ,UAAA,OAAO,EAAE,MAAMN,UAAU,CAACO,OAAO,CAACF,GAAT,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARR;AAAA,SAASE,OAAO,CAACF,GAAjB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GA/CuBd,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from '../axios';\r\nimport './css/Inbox.css';\r\n\r\nexport default function Inbox() {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchInbox = async () => {\r\n            try {\r\n                const response = await axios.get('/api/messages/inbox');\r\n                setMessages(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching inbox messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchInbox();\r\n    }, []);\r\n\r\n    const markAsRead = async (messageId) => {\r\n        try {\r\n            await axios.patch(`/api/messages/${messageId}/read`);\r\n            setMessages(messages.map(msg => \r\n                msg._id === messageId ? { ...msg, read: true } : msg\r\n            ));\r\n        } catch (error) {\r\n            console.error('Error marking message as read:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"inbox\">\r\n            <h3>Inbox</h3>\r\n            <ul className=\"message-list\">\r\n                {messages.map(message => (\r\n                    <li key={message._id} className={`message-item ${message.read ? 'read' : 'unread'}`}>\r\n                        <div className=\"message-header\">\r\n                            <span className=\"sender\">{message.sender.username}</span>\r\n                            <span className=\"date\">{new Date(message.createdAt).toLocaleString()}</span>\r\n                        </div>\r\n                        <div className=\"message-subject\">{message.subject}</div>\r\n                        <div className=\"message-preview\">{message.content.substring(0, 100)}...</div>\r\n                        {!message.read && (\r\n                            <button onClick={() => markAsRead(message._id)}>Mark as Read</button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}