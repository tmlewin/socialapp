{"ast":null,"code":"/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\nimport { mergeClasses } from './shared/src/utils.js';\nconst Icon = forwardRef(({\n  color = \"currentColor\",\n  size = 24,\n  strokeWidth = 2,\n  absoluteStrokeWidth,\n  className = \"\",\n  children,\n  iconNode,\n  ...rest\n}, ref) => {\n  return createElement(\"svg\", {\n    ref,\n    ...defaultAttributes,\n    width: size,\n    height: size,\n    stroke: color,\n    strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n    className: mergeClasses(\"lucide\", className),\n    ...rest\n  }, [...iconNode.map(([tag, attrs]) => createElement(tag, attrs)), ...(Array.isArray(children) ? children : [children])]);\n});\nexport { Icon as default };","map":{"version":3,"sources":["../../src/Icon.ts"],"names":[],"mappings":";;;;;;;;;AAwBA,MAAM,IAAO,GAAA,UAAA,CACX,CACE;AACE,EAAA,KAAQ,GAAA,cADV;AAEE,EAAA,IAAO,GAAA,EAFT;AAGE,EAAA,WAAc,GAAA,CAHhB;AAIE,EAAA,mBAJF;AAKE,EAAA,SAAY,GAAA,EALd;AAME,EAAA,QANF;AAOE,EAAA,QAPF;AAQE,KAAG;AARL,CADF,EAWE,GAXF,KAYK;AACI,SAAA,aAAA,CACL,KADK,EAEL;AACE,IAAA,GADF;AAEE,OAAG,iBAFL;AAGE,IAAA,KAAO,EAAA,IAHT;AAIE,IAAA,MAAQ,EAAA,IAJV;AAKE,IAAA,MAAQ,EAAA,KALV;AAME,IAAA,WAAA,EAAa,mBAAA,GAAuB,MAAO,CAAA,WAAA,CAAP,GAAsB,EAAtB,GAA4B,MAAA,CAAO,IAAP,CAAnD,GAAkE,WANjF;AAOE,IAAA,SAAA,EAAW,YAAa,CAAA,QAAA,EAAU,SAAV,CAP1B;AAQE,OAAG;AARL,GAFK,EAYL,CACE,GAAG,QAAS,CAAA,GAAT,CAAa,CAAC,CAAC,GAAD,EAAM,KAAN,CAAD,KAAkB,aAAA,CAAc,GAAd,EAAmB,KAAnB,CAA/B,CADL,EAEE,IAAI,KAAM,CAAA,OAAN,CAAc,QAAd,IAA0B,QAA1B,GAAqC,CAAC,QAAD,CAAzC,CAFF,CAZK,CAAA;AAiBT,CA/BW,CAAb","sourcesContent":["import { createElement, forwardRef } from 'react';\nimport defaultAttributes from './defaultAttributes';\nimport { IconNode, LucideProps } from './types';\nimport { mergeClasses } from '@lucide/shared';\n\ninterface IconComponentProps extends LucideProps {\n  iconNode: IconNode;\n}\n\n/**\n * Lucide icon component\n *\n * @component Icon\n * @param {object} props\n * @param {string} props.color - The color of the icon\n * @param {number} props.size - The size of the icon\n * @param {number} props.strokeWidth - The stroke width of the icon\n * @param {boolean} props.absoluteStrokeWidth - Whether to use absolute stroke width\n * @param {string} props.className - The class name of the icon\n * @param {IconNode} props.children - The children of the icon\n * @param {IconNode} props.iconNode - The icon node of the icon\n *\n * @returns {ForwardRefExoticComponent} LucideIcon\n */\nconst Icon = forwardRef<SVGSVGElement, IconComponentProps>(\n  (\n    {\n      color = 'currentColor',\n      size = 24,\n      strokeWidth = 2,\n      absoluteStrokeWidth,\n      className = '',\n      children,\n      iconNode,\n      ...rest\n    },\n    ref,\n  ) => {\n    return createElement(\n      'svg',\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? (Number(strokeWidth) * 24) / Number(size) : strokeWidth,\n        className: mergeClasses('lucide', className),\n        ...rest,\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...(Array.isArray(children) ? children : [children]),\n      ],\n    );\n  },\n);\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}