{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: \"http://localhost:8080/\"\n});\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    try {\n      // Implement your token refresh logic here\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await instance.post('/api/auth/refresh-token', {\n        refreshToken\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      originalRequest.headers['Authorization'] = `Bearer ${token}`;\n      return instance(originalRequest);\n    } catch (refreshError) {\n      // Handle refresh token failure (e.g., logout user)\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/axios.js"],"names":["axios","instance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","data","setItem","refreshError","removeItem","window","location","href"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAb,CAAjB;AAIAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACKC,MAAD,IAAY;AACR,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAmC,UAASH,KAAM,EAAlD;AACH;;AACD,SAAOD,MAAP;AACH,CAPL,EAQKK,KAAD,IAAW;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAVL;AAaAX,QAAQ,CAACG,YAAT,CAAsBW,QAAtB,CAA+BT,GAA/B,CACKS,QAAD,IAAcA,QADlB,EAEI,MAAOH,KAAP,IAAiB;AACb,QAAMI,eAAe,GAAGJ,KAAK,CAACL,MAA9B;;AACA,MAAIK,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAC1DF,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;;AACA,QAAI;AACA;AACA,YAAMC,YAAY,GAAGV,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;AACA,YAAMK,QAAQ,GAAG,MAAMd,QAAQ,CAACmB,IAAT,CAAc,yBAAd,EAAyC;AAAED,QAAAA;AAAF,OAAzC,CAAvB;AACA,YAAM;AAAEX,QAAAA;AAAF,UAAYO,QAAQ,CAACM,IAA3B;AACAZ,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8Bd,KAA9B;AACAQ,MAAAA,eAAe,CAACL,OAAhB,CAAwB,eAAxB,IAA4C,UAASH,KAAM,EAA3D;AACA,aAAOP,QAAQ,CAACe,eAAD,CAAf;AACH,KARD,CAQE,OAAOO,YAAP,EAAqB;AACnB;AACAd,MAAAA,YAAY,CAACe,UAAb,CAAwB,MAAxB;AACAf,MAAAA,YAAY,CAACe,UAAb,CAAwB,OAAxB;AACAf,MAAAA,YAAY,CAACe,UAAb,CAAwB,cAAxB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACA,aAAOd,OAAO,CAACC,MAAR,CAAeS,YAAf,CAAP;AACH;AACJ;;AACD,SAAOV,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAxBL;AA2BA,eAAeX,QAAf","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"http://localhost:8080/\",\n});\n\ninstance.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\ninstance.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n        if (error.response.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true;\n            try {\n                // Implement your token refresh logic here\n                const refreshToken = localStorage.getItem('refreshToken');\n                const response = await instance.post('/api/auth/refresh-token', { refreshToken });\n                const { token } = response.data;\n                localStorage.setItem('token', token);\n                originalRequest.headers['Authorization'] = `Bearer ${token}`;\n                return instance(originalRequest);\n            } catch (refreshError) {\n                // Handle refresh token failure (e.g., logout user)\n                localStorage.removeItem('user');\n                localStorage.removeItem('token');\n                localStorage.removeItem('refreshToken');\n                window.location.href = '/login';\n                return Promise.reject(refreshError);\n            }\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport default instance;"]},"metadata":{},"sourceType":"module"}