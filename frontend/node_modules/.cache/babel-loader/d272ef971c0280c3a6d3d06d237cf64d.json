{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\CreatePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useDropzone } from 'react-dropzone';\nimport Compressor from 'compressorjs';\nimport axios from '../axios';\nimport './css/CreatePost.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_FILE_SIZE = 4 * 1024 * 1024; // 4MB\n\nconst CreatePost = ({\n  threadId,\n  onPostCreated\n}) => {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [images, setImages] = useState([]);\n\n  const compressImage = file => {\n    return new Promise((resolve, reject) => {\n      new Compressor(file, {\n        quality: 0.6,\n        maxWidth: 1000,\n        maxHeight: 1000,\n\n        success(result) {\n          resolve(result);\n        },\n\n        error(err) {\n          reject(err);\n        }\n\n      });\n    });\n  };\n\n  const onDrop = useCallback(async acceptedFiles => {\n    const compressedFiles = await Promise.all(acceptedFiles.map(async file => {\n      if (file.size > MAX_FILE_SIZE) {\n        return compressImage(file);\n      }\n\n      return file;\n    }));\n    setImages(prevImages => [...prevImages, ...compressedFiles]);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: 'image/*',\n    maxSize: MAX_FILE_SIZE\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('threadId', threadId);\n    formData.append('title', title);\n    formData.append('content', content);\n    images.forEach((image, index) => {\n      formData.append('images', image); // Change this line\n    });\n\n    try {\n      const response = await axios.post('/api/posts', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      onPostCreated(response.data);\n      setTitle('');\n      setContent('');\n      setImages([]);\n    } catch (error) {\n      var _error$response;\n\n      console.error('Error creating post:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n\n  const modules = useMemo(() => ({\n    toolbar: [[{\n      header: [1, 2, false]\n    }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n      list: 'ordered'\n    }, {\n      list: 'bullet'\n    }], ['link', 'image'], ['clean']],\n    clipboard: {\n      matchVisual: false\n    }\n  }), []);\n  const formats = ['header', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'link', 'image'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add a New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Post Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        theme: \"snow\",\n        value: content,\n        onChange: setContent,\n        modules: modules,\n        formats: formats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n        className: `dropzone ${isDragActive ? 'active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drop the images here ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag 'n' drop some images here, or click to select images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(image),\n          alt: `Preview ${index + 1}`,\n          className: \"thumbnail\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreatePost, \"/sxefaKBfxflUBtJ60UR14Xd4LM=\", false, function () {\n  return [useDropzone];\n});\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/CreatePost.jsx"],"names":["React","useState","useCallback","useMemo","ReactQuill","useDropzone","Compressor","axios","MAX_FILE_SIZE","CreatePost","threadId","onPostCreated","title","setTitle","content","setContent","images","setImages","compressImage","file","Promise","resolve","reject","quality","maxWidth","maxHeight","success","result","error","err","onDrop","acceptedFiles","compressedFiles","all","map","size","prevImages","getRootProps","getInputProps","isDragActive","accept","maxSize","handleSubmit","e","preventDefault","formData","FormData","append","forEach","image","index","response","post","headers","data","console","message","modules","toolbar","header","list","clipboard","matchVisual","formats","target","value","length","URL","createObjectURL"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,iCAAP;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,sBAAP;;AAEA,MAAMC,aAAa,GAAG,IAAI,IAAJ,GAAW,IAAjC,C,CAAuC;;AAEvC,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAiC;AAAA;;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMiB,aAAa,GAAIC,IAAD,IAAU;AAC5B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIhB,UAAJ,CAAea,IAAf,EAAqB;AACjBI,QAAAA,OAAO,EAAE,GADQ;AAEjBC,QAAAA,QAAQ,EAAE,IAFO;AAGjBC,QAAAA,SAAS,EAAE,IAHM;;AAIjBC,QAAAA,OAAO,CAACC,MAAD,EAAS;AACZN,UAAAA,OAAO,CAACM,MAAD,CAAP;AACH,SANgB;;AAOjBC,QAAAA,KAAK,CAACC,GAAD,EAAM;AACPP,UAAAA,MAAM,CAACO,GAAD,CAAN;AACH;;AATgB,OAArB;AAWH,KAZM,CAAP;AAaH,GAdD;;AAgBA,QAAMC,MAAM,GAAG5B,WAAW,CAAC,MAAO6B,aAAP,IAAyB;AAChD,UAAMC,eAAe,GAAG,MAAMZ,OAAO,CAACa,GAAR,CAC1BF,aAAa,CAACG,GAAd,CAAkB,MAAOf,IAAP,IAAgB;AAC9B,UAAIA,IAAI,CAACgB,IAAL,GAAY3B,aAAhB,EAA+B;AAC3B,eAAOU,aAAa,CAACC,IAAD,CAApB;AACH;;AACD,aAAOA,IAAP;AACH,KALD,CAD0B,CAA9B;AASAF,IAAAA,SAAS,CAAEmB,UAAD,IAAgB,CAAC,GAAGA,UAAJ,EAAgB,GAAGJ,eAAnB,CAAjB,CAAT;AACH,GAXyB,EAWvB,EAXuB,CAA1B;AAaA,QAAM;AAAEK,IAAAA,YAAF;AAAgBC,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,MAAgDlC,WAAW,CAAC;AAC9DyB,IAAAA,MAD8D;AAE9DU,IAAAA,MAAM,EAAE,SAFsD;AAG9DC,IAAAA,OAAO,EAAEjC;AAHqD,GAAD,CAAjE;;AAMA,QAAMkC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BrC,QAA5B;AACAmC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBnC,KAAzB;AACAiC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BjC,OAA3B;AACAE,IAAAA,MAAM,CAACgC,OAAP,CAAe,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7BL,MAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BE,KAA1B,EAD6B,CACK;AACrC,KAFD;;AAIA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAM5C,KAAK,CAAC6C,IAAN,CAAW,YAAX,EAAyBP,QAAzB,EAAmC;AACtDQ,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAD6C,OAAnC,CAAvB;AAGA1C,MAAAA,aAAa,CAACwC,QAAQ,CAACG,IAAV,CAAb;AACAzC,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,MAAAA,SAAS,CAAC,EAAD,CAAT;AACH,KARD,CAQE,OAAOW,KAAP,EAAc;AAAA;;AACZ2B,MAAAA,OAAO,CAAC3B,KAAR,CAAc,sBAAd,EAAsC,oBAAAA,KAAK,CAACuB,QAAN,oEAAgBG,IAAhB,KAAwB1B,KAAK,CAAC4B,OAApE;AACH;AACJ,GArBD;;AAuBA,QAAMC,OAAO,GAAGtD,OAAO,CAAC,OAAO;AAC3BuD,IAAAA,OAAO,EAAE,CACL,CAAC;AAAEC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP;AAAV,KAAD,CADK,EAEL,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,QAAhC,EAA0C,YAA1C,CAFK,EAGL,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,EAAsB;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAAtB,CAHK,EAIL,CAAC,MAAD,EAAS,OAAT,CAJK,EAKL,CAAC,OAAD,CALK,CADkB;AAQ3BC,IAAAA,SAAS,EAAE;AACPC,MAAAA,WAAW,EAAE;AADN;AARgB,GAAP,CAAD,EAWnB,EAXmB,CAAvB;AAaA,QAAMC,OAAO,GAAG,CACZ,QADY,EAEZ,MAFY,EAEJ,QAFI,EAEM,WAFN,EAEmB,QAFnB,EAE6B,YAF7B,EAGZ,MAHY,EAGJ,QAHI,EAIZ,MAJY,EAIJ,OAJI,CAAhB;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,QAAQ,EAAErB,YAAhB;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,WAAW,EAAC,YAFhB;AAGI,QAAA,KAAK,EAAE9B,KAHX;AAII,QAAA,QAAQ,EAAG+B,CAAD,IAAO9B,QAAQ,CAAC8B,CAAC,CAACqB,MAAF,CAASC,KAAV,CAJ7B;AAKI,QAAA,QAAQ;AALZ;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI,QAAC,UAAD;AACI,QAAA,KAAK,EAAC,MADV;AAEI,QAAA,KAAK,EAAEnD,OAFX;AAGI,QAAA,QAAQ,EAAEC,UAHd;AAII,QAAA,OAAO,EAAE0C,OAJb;AAKI,QAAA,OAAO,EAAEM;AALb;AAAA;AAAA;AAAA;AAAA,cARJ,eAeI,oBAAS1B,YAAY,EAArB;AAAyB,QAAA,SAAS,EAAG,YAAWE,YAAY,GAAG,QAAH,GAAc,EAAG,EAA7E;AAAA,gCACI,sBAAWD,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKC,YAAY,gBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADS,gBAGT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALR;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ,EAuBKvB,MAAM,CAACkD,MAAP,GAAgB,CAAhB,iBACG;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACKlD,MAAM,CAACkB,GAAP,CAAW,CAACe,KAAD,EAAQC,KAAR,kBACR;AAEI,UAAA,GAAG,EAAEiB,GAAG,CAACC,eAAJ,CAAoBnB,KAApB,CAFT;AAGI,UAAA,GAAG,EAAG,WAAUC,KAAK,GAAG,CAAE,EAH9B;AAII,UAAA,SAAS,EAAC;AAJd,WACSA,KADT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAxBR,eAmCI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0CH,CA7HD;;GAAMzC,U;UAkCoDJ,W;;;KAlCpDI,U;AA+HN,eAAeA,UAAf","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useDropzone } from 'react-dropzone';\nimport Compressor from 'compressorjs';\nimport axios from '../axios';\nimport './css/CreatePost.css';\n\nconst MAX_FILE_SIZE = 4 * 1024 * 1024; // 4MB\n\nconst CreatePost = ({ threadId, onPostCreated }) => {\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [images, setImages] = useState([]);\n\n    const compressImage = (file) => {\n        return new Promise((resolve, reject) => {\n            new Compressor(file, {\n                quality: 0.6,\n                maxWidth: 1000,\n                maxHeight: 1000,\n                success(result) {\n                    resolve(result);\n                },\n                error(err) {\n                    reject(err);\n                },\n            });\n        });\n    };\n\n    const onDrop = useCallback(async (acceptedFiles) => {\n        const compressedFiles = await Promise.all(\n            acceptedFiles.map(async (file) => {\n                if (file.size > MAX_FILE_SIZE) {\n                    return compressImage(file);\n                }\n                return file;\n            })\n        );\n\n        setImages((prevImages) => [...prevImages, ...compressedFiles]);\n    }, []);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n        onDrop,\n        accept: 'image/*',\n        maxSize: MAX_FILE_SIZE,\n    });\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('threadId', threadId);\n        formData.append('title', title);\n        formData.append('content', content);\n        images.forEach((image, index) => {\n            formData.append('images', image); // Change this line\n        });\n\n        try {\n            const response = await axios.post('/api/posts', formData, {\n                headers: { 'Content-Type': 'multipart/form-data' },\n            });\n            onPostCreated(response.data);\n            setTitle('');\n            setContent('');\n            setImages([]);\n        } catch (error) {\n            console.error('Error creating post:', error.response?.data || error.message);\n        }\n    };\n\n    const modules = useMemo(() => ({\n        toolbar: [\n            [{ header: [1, 2, false] }],\n            ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            ['link', 'image'],\n            ['clean'],\n        ],\n        clipboard: {\n            matchVisual: false,\n        },\n    }), []);\n\n    const formats = [\n        'header',\n        'bold', 'italic', 'underline', 'strike', 'blockquote',\n        'list', 'bullet',\n        'link', 'image'\n    ];\n\n    return (\n        <div className=\"create-post\">\n            <h3>Add a New Post</h3>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Post Title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    required\n                />\n                <ReactQuill\n                    theme=\"snow\"\n                    value={content}\n                    onChange={setContent}\n                    modules={modules}\n                    formats={formats}\n                />\n                <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>\n                    <input {...getInputProps()} />\n                    {isDragActive ? (\n                        <p>Drop the images here ...</p>\n                    ) : (\n                        <p>Drag 'n' drop some images here, or click to select images</p>\n                    )}\n                </div>\n                {images.length > 0 && (\n                    <div className=\"image-preview\">\n                        {images.map((image, index) => (\n                            <img\n                                key={index}\n                                src={URL.createObjectURL(image)}\n                                alt={`Preview ${index + 1}`}\n                                className=\"thumbnail\"\n                            />\n                        ))}\n                    </div>\n                )}\n                <button type=\"submit\">Submit Post</button>\n            </form>\n        </div>\n    );\n};\n\nexport default CreatePost;\n"]},"metadata":{},"sourceType":"module"}