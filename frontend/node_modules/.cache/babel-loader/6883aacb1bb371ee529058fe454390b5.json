{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\Feed.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from '../axios';\nimport { updateContext } from '../context/updateContext';\nimport Post from './Post';\nimport SearchBar from './SearchBar';\nimport './css/Feed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [updater, setUpdater] = useContext(updateContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchPosts();\n  }, [updater]);\n\n  const fetchPosts = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await axios.get('/api/posts');\n      setPosts(response.data);\n      setFilteredPosts(response.data);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      setError(\"Failed to fetch posts. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSearch = async searchTerm => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      if (!searchTerm.trim()) {\n        // If search term is empty, fetch all posts\n        await fetchPosts();\n      } else {\n        const response = await axios.get(`/api/posts/search?q=${encodeURIComponent(searchTerm)}`);\n        setFilteredPosts(response.data);\n      }\n    } catch (error) {\n      console.error(\"Error searching posts:\", error);\n      setError(\"Failed to search posts. Please try again.\");\n\n      if (error.response) {\n        console.error(\"Response data:\", error.response.data);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePostUpdate = updatedPost => {\n    setPosts(prevPosts => {\n      const updatedPosts = prevPosts.map(post => post._id === updatedPost._id ? updatedPost : post);\n      return updatedPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    });\n  };\n\n  const handlePostDelete = deletedPostId => {\n    setPosts(prevPosts => prevPosts.filter(post => post._id !== deletedPostId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }, this), filteredPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      onPostUpdate: handlePostUpdate,\n      onPostDelete: handlePostDelete\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Feed, \"RK52yREK/JVEBaySsqCoKorvkA4=\");\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/Feed.jsx"],"names":["React","useState","useEffect","useContext","axios","updateContext","Post","SearchBar","Feed","posts","setPosts","filteredPosts","setFilteredPosts","updater","setUpdater","isLoading","setIsLoading","error","setError","fetchPosts","response","get","data","console","handleSearch","searchTerm","trim","encodeURIComponent","handlePostUpdate","updatedPost","prevPosts","updatedPosts","map","post","_id","sort","a","b","Date","createdAt","handlePostDelete","deletedPostId","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from '../axios';\r\nimport { updateContext } from '../context/updateContext';\r\nimport Post from './Post';\r\nimport SearchBar from './SearchBar';\r\nimport './css/Feed.css';\r\n\r\nexport default function Feed() {\r\n    const [posts, setPosts] = useState([]);\r\n    const [filteredPosts, setFilteredPosts] = useState([]);\r\n    const [updater, setUpdater] = useContext(updateContext);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, [updater]);\r\n\r\n    const fetchPosts = async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await axios.get('/api/posts');\r\n            setPosts(response.data);\r\n            setFilteredPosts(response.data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching posts:\", error);\r\n            setError(\"Failed to fetch posts. Please try again later.\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSearch = async (searchTerm) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            if (!searchTerm.trim()) {\r\n                // If search term is empty, fetch all posts\r\n                await fetchPosts();\r\n            } else {\r\n                const response = await axios.get(`/api/posts/search?q=${encodeURIComponent(searchTerm)}`);\r\n                setFilteredPosts(response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error searching posts:\", error);\r\n            setError(\"Failed to search posts. Please try again.\");\r\n            if (error.response) {\r\n                console.error(\"Response data:\", error.response.data);\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handlePostUpdate = (updatedPost) => {\r\n        setPosts(prevPosts => {\r\n            const updatedPosts = prevPosts.map(post => \r\n                post._id === updatedPost._id ? updatedPost : post\r\n            );\r\n            return updatedPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n        });\r\n    };\r\n\r\n    const handlePostDelete = (deletedPostId) => {\r\n        setPosts(prevPosts => prevPosts.filter(post => post._id !== deletedPostId));\r\n    };\r\n\r\n    return (\r\n        <div className=\"feed\">\r\n            <SearchBar onSearch={handleSearch} />\r\n            {isLoading && <p>Loading...</p>}\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {filteredPosts.map(post => (\r\n                <Post \r\n                    key={post._id} \r\n                    post={post}\r\n                    onPostUpdate={handlePostUpdate}\r\n                    onPostDelete={handlePostDelete}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}