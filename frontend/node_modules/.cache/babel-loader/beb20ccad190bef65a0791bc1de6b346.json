{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\ThreadView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from '../axios';\nimport Post from './Post';\nimport CreatePost from './CreatePost';\nimport './css/ThreadView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreadView = () => {\n  _s();\n\n  const [thread, setThread] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const {\n    threadId\n  } = useParams();\n  useEffect(() => {\n    fetchThreadAndPosts();\n  }, [threadId]);\n\n  const fetchThreadAndPosts = async () => {\n    try {\n      const threadResponse = await axios.get(`/api/threads/${threadId}`);\n      setThread(threadResponse.data);\n      const postsResponse = await axios.get(`/api/threads/${threadId}/posts`);\n      setPosts(postsResponse.data);\n    } catch (error) {\n      console.error('Error fetching thread and posts:', error);\n    }\n  };\n\n  const handlePostCreated = newPost => {\n    setPosts(prevPosts => [newPost, ...prevPosts]);\n  };\n\n  if (!thread) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: thread.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created by: \", thread.user]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreatePost, {\n      onPostCreated: handlePostCreated,\n      threadId: threadId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThreadView, \"XAUYKndXPV5liTlXrJGJF7YEBLA=\", false, function () {\n  return [useParams];\n});\n\n_c = ThreadView;\nexport default ThreadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadView\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/ThreadView.jsx"],"names":["React","useState","useEffect","useParams","axios","Post","CreatePost","ThreadView","thread","setThread","posts","setPosts","threadId","fetchThreadAndPosts","threadResponse","get","data","postsResponse","error","console","handlePostCreated","newPost","prevPosts","title","user","map","post","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeT,SAAS,EAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,mBAAmB;AACtB,GAFQ,EAEN,CAACD,QAAD,CAFM,CAAT;;AAIA,QAAMC,mBAAmB,GAAG,YAAY;AACpC,QAAI;AACA,YAAMC,cAAc,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAW,gBAAeH,QAAS,EAAnC,CAA7B;AACAH,MAAAA,SAAS,CAACK,cAAc,CAACE,IAAhB,CAAT;AAEA,YAAMC,aAAa,GAAG,MAAMb,KAAK,CAACW,GAAN,CAAW,gBAAeH,QAAS,QAAnC,CAA5B;AACAD,MAAAA,QAAQ,CAACM,aAAa,CAACD,IAAf,CAAR;AACH,KAND,CAME,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACH;AACJ,GAVD;;AAYA,QAAME,iBAAiB,GAAIC,OAAD,IAAa;AACnCV,IAAAA,QAAQ,CAACW,SAAS,IAAI,CAACD,OAAD,EAAU,GAAGC,SAAb,CAAd,CAAR;AACH,GAFD;;AAIA,MAAI,CAACd,MAAL,EAAa;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA,gBAAKA,MAAM,CAACe;AAAZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iCAAgBf,MAAM,CAACgB,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,UAAD;AAAY,MAAA,aAAa,EAAEJ,iBAA3B;AAA8C,MAAA,QAAQ,EAAER;AAAxD;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKF,KAAK,CAACe,GAAN,CAAUC,IAAI,iBACX,QAAC,IAAD;AAAqB,MAAA,IAAI,EAAEA;AAA3B,OAAWA,IAAI,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA,YADH,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAvCD;;GAAMpB,U;UAGmBJ,S;;;KAHnBI,U;AAyCN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from '../axios';\r\nimport Post from './Post';\r\nimport CreatePost from './CreatePost';\r\nimport './css/ThreadView.css';\r\n\r\nconst ThreadView = () => {\r\n    const [thread, setThread] = useState(null);\r\n    const [posts, setPosts] = useState([]);\r\n    const { threadId } = useParams();\r\n\r\n    useEffect(() => {\r\n        fetchThreadAndPosts();\r\n    }, [threadId]);\r\n\r\n    const fetchThreadAndPosts = async () => {\r\n        try {\r\n            const threadResponse = await axios.get(`/api/threads/${threadId}`);\r\n            setThread(threadResponse.data);\r\n\r\n            const postsResponse = await axios.get(`/api/threads/${threadId}/posts`);\r\n            setPosts(postsResponse.data);\r\n        } catch (error) {\r\n            console.error('Error fetching thread and posts:', error);\r\n        }\r\n    };\r\n\r\n    const handlePostCreated = (newPost) => {\r\n        setPosts(prevPosts => [newPost, ...prevPosts]);\r\n    };\r\n\r\n    if (!thread) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"thread-view\">\r\n            <h1>{thread.title}</h1>\r\n            <p>Created by: {thread.user}</p>\r\n            <CreatePost onPostCreated={handlePostCreated} threadId={threadId} />\r\n            {posts.map(post => (\r\n                <Post key={post._id} post={post} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThreadView;"]},"metadata":{},"sourceType":"module"}