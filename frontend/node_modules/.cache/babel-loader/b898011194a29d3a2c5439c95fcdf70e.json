{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\ThreadView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from '../axios';\nimport Post from './Post';\nimport CreatePost from './CreatePost';\nimport './css/ThreadView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreadView = () => {\n  _s();\n\n  const [thread, setThread] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    threadId\n  } = useParams();\n  useEffect(() => {\n    const fetchThreadAndPosts = async () => {\n      try {\n        const [threadResponse, postsResponse] = await Promise.all([axios.get(`/api/threads/${threadId}`), axios.get(`/api/threads/${threadId}/posts`)]);\n        setThread(threadResponse.data);\n        setPosts(postsResponse.data);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching thread and posts:', err);\n        setError('Failed to load thread and posts. Please try again later.');\n        setLoading(false);\n      }\n    };\n\n    fetchThreadAndPosts();\n  }, [threadId]);\n\n  const handlePostCreated = newPost => {\n    setPosts(prevPosts => [newPost, ...prevPosts]);\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  if (!thread) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Thread not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: thread.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created by: \", thread.user]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreatePost, {\n      onPostCreated: handlePostCreated,\n      threadId: threadId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts in this thread yet. Be the first to post!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThreadView, \"lsZz1IqDn7cRVYnON3RCLlcnyws=\", false, function () {\n  return [useParams];\n});\n\n_c = ThreadView;\nexport default ThreadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadView\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/ThreadView.jsx"],"names":["React","useState","useEffect","useParams","axios","Post","CreatePost","ThreadView","thread","setThread","posts","setPosts","loading","setLoading","error","setError","threadId","fetchThreadAndPosts","threadResponse","postsResponse","Promise","all","get","data","err","console","handlePostCreated","newPost","prevPosts","title","user","length","map","post","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAeb,SAAS,EAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,mBAAmB,GAAG,YAAY;AACpC,UAAI;AACA,cAAM,CAACC,cAAD,EAAiBC,aAAjB,IAAkC,MAAMC,OAAO,CAACC,GAAR,CAAY,CACtDjB,KAAK,CAACkB,GAAN,CAAW,gBAAeN,QAAS,EAAnC,CADsD,EAEtDZ,KAAK,CAACkB,GAAN,CAAW,gBAAeN,QAAS,QAAnC,CAFsD,CAAZ,CAA9C;AAIAP,QAAAA,SAAS,CAACS,cAAc,CAACK,IAAhB,CAAT;AACAZ,QAAAA,QAAQ,CAACQ,aAAa,CAACI,IAAf,CAAR;AACAV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OARD,CAQE,OAAOW,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACX,KAAR,CAAc,kCAAd,EAAkDU,GAAlD;AACAT,QAAAA,QAAQ,CAAC,0DAAD,CAAR;AACAF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAdD;;AAgBAI,IAAAA,mBAAmB;AACtB,GAlBQ,EAkBN,CAACD,QAAD,CAlBM,CAAT;;AAoBA,QAAMU,iBAAiB,GAAIC,OAAD,IAAa;AACnChB,IAAAA,QAAQ,CAACiB,SAAS,IAAI,CAACD,OAAD,EAAU,GAAGC,SAAb,CAAd,CAAR;AACH,GAFD;;AAIA,MAAIhB,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIE,KAAJ,EAAW,oBAAO;AAAA,0BAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACN,MAAL,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA,gBAAKA,MAAM,CAACqB;AAAZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iCAAgBrB,MAAM,CAACsB,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,UAAD;AAAY,MAAA,aAAa,EAAEJ,iBAA3B;AAA8C,MAAA,QAAQ,EAAEV;AAAxD;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKN,KAAK,CAACqB,MAAN,KAAiB,CAAjB,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,GAGGrB,KAAK,CAACsB,GAAN,CAAUC,IAAI,iBACV,QAAC,IAAD;AAAqB,MAAA,IAAI,EAAEA;AAA3B,OAAWA,IAAI,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA,YADJ,CAPR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAjDD;;GAAM3B,U;UAKmBJ,S;;;KALnBI,U;AAmDN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from '../axios';\r\nimport Post from './Post';\r\nimport CreatePost from './CreatePost';\r\nimport './css/ThreadView.css';\r\n\r\nconst ThreadView = () => {\r\n    const [thread, setThread] = useState(null);\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const { threadId } = useParams();\r\n\r\n    useEffect(() => {\r\n        const fetchThreadAndPosts = async () => {\r\n            try {\r\n                const [threadResponse, postsResponse] = await Promise.all([\r\n                    axios.get(`/api/threads/${threadId}`),\r\n                    axios.get(`/api/threads/${threadId}/posts`)\r\n                ]);\r\n                setThread(threadResponse.data);\r\n                setPosts(postsResponse.data);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                console.error('Error fetching thread and posts:', err);\r\n                setError('Failed to load thread and posts. Please try again later.');\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchThreadAndPosts();\r\n    }, [threadId]);\r\n\r\n    const handlePostCreated = (newPost) => {\r\n        setPosts(prevPosts => [newPost, ...prevPosts]);\r\n    };\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n    if (!thread) return <div>Thread not found</div>;\r\n\r\n    return (\r\n        <div className=\"thread-view\">\r\n            <h1>{thread.title}</h1>\r\n            <p>Created by: {thread.user}</p>\r\n            <CreatePost onPostCreated={handlePostCreated} threadId={threadId} />\r\n            {posts.length === 0 ? (\r\n                <p>No posts in this thread yet. Be the first to post!</p>\r\n            ) : (\r\n                posts.map(post => (\r\n                    <Post key={post._id} post={post} />\r\n                ))\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThreadView;"]},"metadata":{},"sourceType":"module"}