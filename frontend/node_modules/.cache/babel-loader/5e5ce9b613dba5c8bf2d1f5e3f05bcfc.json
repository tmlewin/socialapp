{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tech Guru\\\\Desktop\\\\Javascript\\\\social\\\\frontend\\\\src\\\\components\\\\ThreadView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport axios from '../axios';\nimport Post from './Post';\nimport CreatePost from './CreatePost';\nimport LoadingSpinner from './LoadingSpinner';\nimport './css/ThreadView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreadView = () => {\n  _s();\n\n  const [thread, setThread] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    threadId\n  } = useParams();\n  const location = useLocation();\n  const postsRef = useRef({});\n  useEffect(() => {\n    const fetchThreadAndPosts = async () => {\n      try {\n        const [threadResponse, postsResponse] = await Promise.all([axios.get(`/api/threads/${threadId}`), axios.get(`/api/threads/${threadId}/posts`)]);\n        setThread(threadResponse.data);\n        setPosts(postsResponse.data);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching thread and posts:', err);\n        setError('Failed to load thread and posts. Please try again later.');\n        setLoading(false);\n      }\n    };\n\n    fetchThreadAndPosts();\n  }, [threadId]);\n  useEffect(() => {\n    if (location.hash) {\n      const postId = location.hash.replace('#post-', '');\n      const postElement = postsRef.current[postId];\n\n      if (postElement) {\n        postElement.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, [location, posts]);\n\n  const handlePostCreated = newPost => {\n    setPosts(prevPosts => [newPost, ...prevPosts]);\n  };\n\n  const handlePostUpdate = useCallback(updatedPost => {\n    console.log('ThreadView handlePostUpdate called with:', updatedPost);\n    setPosts(prevPosts => prevPosts.map(post => post._id === updatedPost._id ? updatedPost : post));\n  }, []);\n  const handlePostDelete = useCallback(deletedPostId => {\n    console.log('ThreadView handlePostDelete called with:', deletedPostId);\n    setPosts(prevPosts => prevPosts.filter(post => post._id !== deletedPostId));\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 23\n  }, this);\n  if (!thread) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Thread not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: thread.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created by: \", thread.user]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreatePost, {\n      onPostCreated: handlePostCreated,\n      threadId: threadId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts in this thread yet. Be the first to post!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => postsRef.current[post._id] = el,\n      children: /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        onPostUpdate: handlePostUpdate,\n        onPostDelete: handlePostDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this)\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThreadView, \"Ui9GsdMiFzbButJdRfSqeEHs3J4=\", false, function () {\n  return [useParams, useLocation];\n});\n\n_c = ThreadView;\nexport default ThreadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadView\");","map":{"version":3,"sources":["C:/Users/Tech Guru/Desktop/Javascript/social/frontend/src/components/ThreadView.jsx"],"names":["React","useState","useEffect","useCallback","useRef","useParams","useLocation","axios","Post","CreatePost","LoadingSpinner","ThreadView","thread","setThread","posts","setPosts","loading","setLoading","error","setError","threadId","location","postsRef","fetchThreadAndPosts","threadResponse","postsResponse","Promise","all","get","data","err","console","hash","postId","replace","postElement","current","scrollIntoView","behavior","handlePostCreated","newPost","prevPosts","handlePostUpdate","updatedPost","log","map","post","_id","handlePostDelete","deletedPostId","filter","title","user","length","el"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport axios from '../axios';\nimport Post from './Post';\nimport CreatePost from './CreatePost';\nimport LoadingSpinner from './LoadingSpinner';\nimport './css/ThreadView.css';\n\nconst ThreadView = () => {\n    const [thread, setThread] = useState(null);\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const { threadId } = useParams();\n    const location = useLocation();\n    const postsRef = useRef({});\n\n    useEffect(() => {\n        const fetchThreadAndPosts = async () => {\n            try {\n                const [threadResponse, postsResponse] = await Promise.all([\n                    axios.get(`/api/threads/${threadId}`),\n                    axios.get(`/api/threads/${threadId}/posts`)\n                ]);\n                setThread(threadResponse.data);\n                setPosts(postsResponse.data);\n                setLoading(false);\n            } catch (err) {\n                console.error('Error fetching thread and posts:', err);\n                setError('Failed to load thread and posts. Please try again later.');\n                setLoading(false);\n            }\n        };\n\n        fetchThreadAndPosts();\n    }, [threadId]);\n\n    useEffect(() => {\n        if (location.hash) {\n            const postId = location.hash.replace('#post-', '');\n            const postElement = postsRef.current[postId];\n            if (postElement) {\n                postElement.scrollIntoView({ behavior: 'smooth' });\n            }\n        }\n    }, [location, posts]);\n\n    const handlePostCreated = (newPost) => {\n        setPosts(prevPosts => [newPost, ...prevPosts]);\n    };\n\n    const handlePostUpdate = useCallback((updatedPost) => {\n        console.log('ThreadView handlePostUpdate called with:', updatedPost);\n        setPosts(prevPosts => prevPosts.map(post => \n            post._id === updatedPost._id ? updatedPost : post\n        ));\n    }, []);\n\n    const handlePostDelete = useCallback((deletedPostId) => {\n        console.log('ThreadView handlePostDelete called with:', deletedPostId);\n        setPosts(prevPosts => prevPosts.filter(post => post._id !== deletedPostId));\n    }, []);\n\n    if (loading) return <LoadingSpinner />;\n    if (error) return <div>Error: {error}</div>;\n    if (!thread) return <div>Thread not found</div>;\n\n    return (\n        <div className=\"thread-view\">\n            <h1>{thread.title}</h1>\n            <p>Created by: {thread.user}</p>\n            <CreatePost onPostCreated={handlePostCreated} threadId={threadId} />\n            {posts.length === 0 ? (\n                <p>No posts in this thread yet. Be the first to post!</p>\n            ) : (\n                posts.map(post => (\n                    <div key={post._id} ref={el => postsRef.current[post._id] = el}>\n                        <Post \n                            post={post} \n                            onPostUpdate={handlePostUpdate}\n                            onPostDelete={handlePostDelete}\n                        />\n                    </div>\n                ))\n            )}\n        </div>\n    );\n};\n\nexport default ThreadView;\n"]},"metadata":{},"sourceType":"module"}