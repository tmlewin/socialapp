[{"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\index.js":"1","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\App.js":"2","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\ErrorBoundary.js":"4","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\context\\updateContext.js":"5","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ForumPage.jsx":"6","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Feed.jsx":"7","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Header.jsx":"8","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\AuthForm.jsx":"9","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadView.jsx":"10","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\axios.js":"11","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadList.jsx":"12","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Post.jsx":"13","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreatePost.jsx":"14","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadsPage.jsx":"15","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\SearchBar.jsx":"16","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Profile.jsx":"17","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreateThreadComponent.jsx":"18","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\LoadingSpinner.jsx":"19","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\config.js":"20"},{"size":288,"mtime":1727407522622,"results":"21","hashOfConfig":"22"},{"size":2525,"mtime":1728929777647,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1630273694000,"results":"24","hashOfConfig":"22"},{"size":517,"mtime":1727407455446,"results":"25","hashOfConfig":"22"},{"size":89,"mtime":1630273694000,"results":"26","hashOfConfig":"22"},{"size":1793,"mtime":1727648580132,"results":"27","hashOfConfig":"22"},{"size":4114,"mtime":1728869959659,"results":"28","hashOfConfig":"22"},{"size":1459,"mtime":1729103210248,"results":"29","hashOfConfig":"22"},{"size":9459,"mtime":1729036262543,"results":"30","hashOfConfig":"22"},{"size":2754,"mtime":1729011105713,"results":"31","hashOfConfig":"22"},{"size":895,"mtime":1728929777797,"results":"32","hashOfConfig":"22"},{"size":643,"mtime":1727647264478,"results":"33","hashOfConfig":"22"},{"size":16923,"mtime":1729011956774,"results":"34","hashOfConfig":"22"},{"size":4493,"mtime":1728857993387,"results":"35","hashOfConfig":"22"},{"size":2052,"mtime":1727648580132,"results":"36","hashOfConfig":"22"},{"size":540,"mtime":1727581274929,"results":"37","hashOfConfig":"22"},{"size":11740,"mtime":1728925905278,"results":"38","hashOfConfig":"22"},{"size":1214,"mtime":1727649745015,"results":"39","hashOfConfig":"22"},{"size":242,"mtime":1728274973892,"results":"40","hashOfConfig":"22"},{"size":155,"mtime":1728842450531,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"6010vk",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\index.js",[],["86","87"],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\App.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\ErrorBoundary.js",[],["88","89"],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\context\\updateContext.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ForumPage.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Feed.jsx",["90","91","92","93"],"import React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport axios from '../axios';\nimport { updateContext } from '../context/updateContext';\nimport Post from './Post';\nimport SearchBar from './SearchBar';\nimport LoadingSpinner from './LoadingSpinner';\nimport './css/Feed.css';\n\nexport default function Feed() {\n    const [posts, setPosts] = useState([]);\n    const [filteredPosts, setFilteredPosts] = useState([]);\n    const [updater, setUpdater] = useContext(updateContext);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n    const loader = useRef(null);\n\n    const fetchPosts = useCallback(async (pageNum) => {\n        if (!hasMore && pageNum !== 1) return;\n\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await axios.get(`/api/posts?page=${pageNum}&limit=10`);\n            const newPosts = response.data.posts.map(post => ({\n                ...post,\n                userProfilePicture: post.userProfilePicture || post.userId.profilePicture\n            }));\n\n            setPosts(prevPosts => pageNum === 1 ? newPosts : [...prevPosts, ...newPosts]);\n            setFilteredPosts(prevPosts => pageNum === 1 ? newPosts : [...prevPosts, ...newPosts]);\n            setHasMore(response.data.hasMore);\n        } catch (error) {\n            console.error(\"Error fetching posts:\", error);\n            setError(\"Failed to fetch posts. Please try again later.\");\n        } finally {\n            setIsLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        setPage(1);\n        fetchPosts(1);\n    }, [updater, fetchPosts]);\n\n    useEffect(() => {\n        const options = {\n            root: null,\n            rootMargin: \"20px\",\n            threshold: 1.0\n        };\n\n        const observer = new IntersectionObserver(handleObserver, options);\n        if (loader.current) {\n            observer.observe(loader.current);\n        }\n\n        return () => {\n            if (loader.current) {\n                observer.unobserve(loader.current);\n            }\n        };\n    }, [hasMore, isLoading]);\n\n    const handleObserver = useCallback((entities) => {\n        const target = entities[0];\n        if (target.isIntersecting && hasMore && !isLoading) {\n            setPage((prevPage) => prevPage + 1);\n        }\n    }, [hasMore, isLoading]);\n\n    useEffect(() => {\n        if (page > 1) {\n            fetchPosts(page);\n        }\n    }, [page, fetchPosts]);\n\n    const handleSearch = useCallback((searchTerm) => {\n        if (!searchTerm.trim()) {\n            setFilteredPosts(posts);\n        } else {\n            const filtered = posts.filter(post =>\n                post.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                post.title.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n            setFilteredPosts(filtered);\n        }\n    }, [posts]);\n\n    const handlePostUpdate = useCallback((updatedPost) => {\n        setPosts(prevPosts => {\n            const updatedPosts = prevPosts.map(post => \n                post._id === updatedPost._id ? updatedPost : post\n            );\n            return updatedPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n        });\n    }, []);\n\n    const handlePostDelete = useCallback((deletedPostId) => {\n        setPosts(prevPosts => prevPosts.filter(post => post._id !== deletedPostId));\n    }, []);\n\n    return (\n        <div className=\"feed\">\n            <SearchBar onSearch={handleSearch} />\n            {filteredPosts.map(post => (\n                <Post \n                    key={post._id} \n                    post={post}\n                    onPostUpdate={handlePostUpdate}\n                    onPostDelete={handlePostDelete}\n                />\n            ))}\n            {isLoading && <LoadingSpinner />}\n            {error && <p className=\"error-message\">{error}</p>}\n            {hasMore && <div ref={loader} style={{ height: '20px', margin: '20px 0' }} />}\n\n        </div>\n    );\n}","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Header.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\AuthForm.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadView.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\axios.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadList.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Post.jsx",["94","95","96","97","98"],"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport DOMPurify from 'dompurify';\nimport './css/Post.css';\nimport { Heart, MessageCircle, Share2, MoreHorizontal, Send, Edit, Trash2, Copy } from 'lucide-react';\nimport axios from '../axios';\nimport { Link } from 'react-router-dom';\nimport config from '../config'; // We'll create this file\n\nexport default function Post({ post, onPostUpdate, onPostDelete }) {\n    console.log('Post object:', post); // Add this line for debugging\n    console.log('UserId:', post.userId); // Add this line for debugging\n\n    const [localPost, setLocalPost] = useState(post);\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n    const [showPostOptions, setShowPostOptions] = useState(false);\n    const [editingPost, setEditingPost] = useState(false);\n    const [editingComment, setEditingComment] = useState(null);\n    const [editedContent, setEditedContent] = useState('');\n    const [commentOptionsId, setCommentOptionsId] = useState(null);\n    const defaultAvatar = \"https://via.placeholder.com/40\";\n\n    const [userProfilePicture, setUserProfilePicture] = useState(post.userProfilePicture || defaultAvatar);\n    const [isLiked, setIsLiked] = useState(false);\n    const [showSharePopup, setShowSharePopup] = useState(false);\n    const [copySuccess, setCopySuccess] = useState('');\n\n    // Add these new refs\n    const postOptionsRef = useRef(null);\n    const commentOptionsRef = useRef(null);\n\n    useEffect(() => {\n        setLocalPost(post);\n        fetchComments();\n        // Check if the current user has liked the post\n        const currentUser = JSON.parse(localStorage.getItem('user'));\n        setIsLiked(post.likes.includes(currentUser._id));\n    }, [post]);\n\n    useEffect(() => {\n        const fetchLatestProfilePicture = async () => {\n            if (!post.userId) {\n                console.error('No userId provided for post:', post);\n                return;\n            }\n            try {\n                const response = await axios.get(`/api/users/${post.userId}`);\n                if (response.data && response.data.profilePicture) {\n                    setUserProfilePicture(response.data.profilePicture);\n                }\n            } catch (error) {\n                console.error('Error fetching latest profile picture:', error.response || error);\n            }\n        };\n\n        fetchLatestProfilePicture();\n    }, [post.userId]);\n\n    const fetchComments = useCallback(async () => {\n        try {\n            const response = await axios.get(`/api/posts/${localPost._id}/comments`);\n            setComments(response.data);\n        } catch (error) {\n            console.error('Error fetching comments:', error);\n        }\n    }, [localPost._id]);\n\n    const handleAddComment = async () => {\n        if (!newComment.trim()) return;\n\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            const response = await axios.post(`/api/posts/${localPost._id}/comments`, {\n                content: newComment,\n                userId: user._id,\n                username: user.username\n            });\n            const updatedComments = await axios.get(`/api/posts/${localPost._id}/comments`);\n            setComments(updatedComments.data);\n            setNewComment('');\n        } catch (error) {\n            console.error('Error adding comment:', error);\n        }\n    };\n\n    const handleEditPost = () => {\n        setEditingPost(true);\n        setEditedContent(localPost.content);\n        setShowPostOptions(false);\n    };\n\n    const handleUpdatePost = async () => {\n        console.log('Attempting to update post:', localPost._id); // Add this line\n        try {\n            const response = await axios.put(`/api/posts/${localPost._id}`, {\n                content: editedContent,\n                userId: localPost.userId\n            });\n            setLocalPost(response.data);\n            setEditingPost(false);\n            console.log('Post updated successfully:', response.data); // Add this line\n            if (typeof onPostUpdate === 'function') {\n                onPostUpdate(response.data);\n            } else {\n                console.warn('onPostUpdate is not a function:', onPostUpdate);\n            }\n        } catch (error) {\n            console.error('Error updating post:', error);\n            if (error.response && error.response.status === 403) {\n                alert('You do not have permission to edit this post.');\n            } else {\n                console.error('An error occurred while updating the post:', error);\n            }\n        }\n    };\n\n    const handleDeletePost = async () => {\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            await axios.delete(`/api/posts/${localPost._id}`, {\n                data: { userId: user._id }\n            });\n            if (typeof onPostDelete === 'function') {\n                onPostDelete(localPost._id);\n            }\n        } catch (error) {\n            console.error('Error deleting post:', error);\n        }\n    };\n\n    const handleEditComment = (comment) => {\n        setEditingComment(comment._id);\n        setEditedContent(comment.content);\n        setCommentOptionsId(null);\n    };\n\n    const handleUpdateComment = async (commentId) => {\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            const response = await axios.put(`/api/posts/${localPost._id}/comments/${commentId}`, {\n                content: editedContent,\n                userId: user._id\n            });\n            \n            // Check if the response contains the updated comment data\n            if (response.data && response.data._id) {\n                const updatedComment = response.data;\n                setComments(comments.map(c => c._id === commentId ? updatedComment : c));\n                setEditingComment(null);\n                setEditedContent('');\n            } else {\n                console.error('Unexpected response format:', response.data);\n            }\n        } catch (error) {\n            console.error('Error updating comment:', error);\n        }\n    };\n\n    const handleDeleteComment = async (commentId) => {\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            await axios.delete(`/api/posts/${localPost._id}/comments/${commentId}`, {\n                data: { userId: user._id }\n            });\n            setComments(comments.filter(c => c._id !== commentId));\n            setCommentOptionsId(null);\n        } catch (error) {\n            console.error('Error deleting comment:', error);\n        }\n    };\n\n    const handleLike = async () => {\n        try {\n            const currentUser = JSON.parse(localStorage.getItem('user'));\n            const response = await axios.put(`/api/posts/${localPost._id}/like`, {\n                userId: currentUser._id\n            });\n\n            // Update local state\n            const updatedLikes = isLiked\n                ? localPost.likes.filter(id => id !== currentUser._id)\n                : [...localPost.likes, currentUser._id];\n\n            setLocalPost(prev => ({\n                ...prev,\n                likes: updatedLikes\n            }));\n            setIsLiked(!isLiked);\n\n            // Call onPostUpdate if it exists\n            if (typeof onPostUpdate === 'function') {\n                onPostUpdate({\n                    ...localPost,\n                    likes: updatedLikes\n                });\n            }\n        } catch (error) {\n            console.error('Error liking/unliking post:', error);\n        }\n    };\n\n    const handleShareClick = () => {\n        setShowSharePopup(true);\n    };\n\n    const copyToClipboard = () => {\n        const postLink = `${window.location.origin}/thread/${localPost.threadId}`;\n        navigator.clipboard.writeText(postLink)\n            .then(() => {\n                setCopySuccess('Link copied!');\n                setTimeout(() => setCopySuccess(''), 2000);\n            })\n            .catch(err => {\n                console.error('Failed to copy: ', err);\n            });\n    };\n\n    // Add this new useEffect hook\n    useEffect(() => {\n        const handleOutsideClick = (event) => {\n            if (postOptionsRef.current && !postOptionsRef.current.contains(event.target)) {\n                setShowPostOptions(false);\n            }\n            if (commentOptionsRef.current && !commentOptionsRef.current.contains(event.target)) {\n                setCommentOptionsId(null);\n            }\n        };\n\n        document.addEventListener('mousedown', handleOutsideClick);\n\n        return () => {\n            document.removeEventListener('mousedown', handleOutsideClick);\n        };\n    }, []);\n\n    const renderContent = () => {\n        const sanitizedContent = DOMPurify.sanitize(localPost.content);\n        return { __html: sanitizedContent };\n    };\n\n    const ContentRenderer = ({ content }) => {\n        const containerRef = useRef(null);\n\n        useEffect(() => {\n            if (containerRef.current) {\n                containerRef.current.innerHTML = content.__html;\n            }\n        }, [content]);\n\n        return <div ref={containerRef} />;\n    };\n\n    return (\n        <div className=\"post\">\n            <div className=\"post-header\">\n                <img \n                    src={userProfilePicture || defaultAvatar} \n                    alt={localPost.user} \n                    className=\"avatar\" \n                    onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n                />\n                <div className=\"post-info\">\n                    <h3>{localPost.user}</h3>\n                    <span>{new Date(localPost.createdAt).toLocaleString()}</span>\n                </div>\n            <div className=\"post-options\">\n                    <MoreHorizontal size={20} className=\"more-options\" onClick={() => setShowPostOptions(!showPostOptions)} />\n                    {showPostOptions && (\n                        <div className=\"options-dropdown\" ref={postOptionsRef}>\n                            <button onClick={handleEditPost}><Edit size={16} /> Edit</button>\n                            <button onClick={handleDeletePost}><Trash2 size={16} /> Delete</button>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className=\"post-content\">\n                {localPost.title && (\n                    <Link to={`/thread/${localPost.threadId}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                        <h4 className=\"thread-title\">{localPost.title}</h4>\n                    </Link>\n                )}\n                {editingPost ? (\n                    <div className=\"edit-post-container\">\n                        <textarea\n                            value={editedContent}\n                            onChange={(e) => setEditedContent(e.target.value)}\n                            className=\"edit-textarea\"\n                        />\n                        <div className=\"edit-buttons\">\n                            <button onClick={handleUpdatePost} className=\"btn btn-save\">Save</button>\n                            <button onClick={() => {\n                                setEditingPost(false);\n                                setEditedContent('');\n                            }} className=\"btn btn-cancel\">Cancel</button>\n                        </div>\n                    </div>\n                ) : (\n                    <>\n                        <ContentRenderer content={renderContent()} />\n                        {localPost.images && localPost.images.length > 0 && (\n                            <div className=\"post-images\">\n                                {localPost.images.map((image, index) => (\n                                    <img \n                                        key={index} \n                                        src={`${config.apiUrl}/${image}`} \n                                        alt={`Post image ${index + 1}`} \n                                        className=\"post-image\"\n                                    />\n                                ))}\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n            <div className=\"post-actions\">\n                <button onClick={handleLike} className={`like-button ${isLiked ? 'liked' : ''}`}>\n                    <Heart size={20} fill={isLiked ? \"#ff0000\" : \"none\"} stroke={isLiked ? \"#ff0000\" : \"currentColor\"} />\n                    {localPost.likes.length}\n                </button>\n                <button><MessageCircle size={20} /> {comments.length}</button>\n                <button onClick={handleShareClick}><Share2 size={20} /></button>\n            </div>\n            {showSharePopup && (\n                <div className=\"share-popup\">\n                    <div className=\"share-popup-content\">\n                        <h4>Share this post</h4>\n                        <div className=\"share-link\">\n                            <input \n                                type=\"text\" \n                                value={`${window.location.origin}/thread/${localPost.threadId}`} \n                                readOnly \n                            />\n                            <button onClick={copyToClipboard}>\n                                <Copy size={20} />\n                            </button>\n                        </div>\n                        {copySuccess && <p className=\"copy-success\">{copySuccess}</p>}\n                        <button onClick={() => setShowSharePopup(false)} className=\"close-popup\">Close</button>\n                    </div>\n                </div>\n            )}\n            <div className=\"post-comments\">\n                {comments.map((comment) => (\n                    <div key={comment._id} className=\"comment\">\n                        <img \n                            src={comment.userProfilePicture || defaultAvatar} \n                            alt={comment.username} \n                            className=\"avatar-small\" \n                            onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n                        />\n                        <div className=\"comment-content\">\n                            <strong>{comment.username}</strong>\n                            {editingComment === comment._id ? (\n                                <div className=\"edit-comment-container\">\n                                    <textarea\n                                        value={editedContent}\n                                        onChange={(e) => setEditedContent(e.target.value)}\n                                        className=\"edit-textarea\"\n                                    />\n                                    <div className=\"edit-buttons\">\n                                        <button onClick={() => handleUpdateComment(comment._id)} className=\"btn btn-save\">Save</button>\n                                        <button onClick={() => {\n                                            setEditingComment(null);\n                                            setEditedContent('');\n                                        }} className=\"btn btn-cancel\">Cancel</button>\n                                    </div>\n                                </div>\n                            ) : (\n                                <p>{comment.content}</p>\n                            )}\n                        </div>\n                        <div className=\"comment-options\">\n                            <MoreHorizontal size={16} onClick={() => setCommentOptionsId(comment._id)} />\n                            {commentOptionsId === comment._id && (\n                                <div className=\"options-dropdown\" ref={commentOptionsRef}>\n                                    <button onClick={() => handleEditComment(comment)}><Edit size={14} /> Edit</button>\n                                    <button onClick={() => handleDeleteComment(comment._id)}><Trash2 size={14} /> Delete</button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"post-comment-input\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Write a comment...\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            e.preventDefault();\n                            handleAddComment();\n                        }\n                    }}\n                />\n                <button onClick={handleAddComment}><Send size={20} /></button>\n            </div>\n        </div>\n    );\n}","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreatePost.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadsPage.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\SearchBar.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Profile.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreateThreadComponent.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\LoadingSpinner.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\config.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"103"},{"ruleId":"101","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":12,"column":21,"nodeType":"107","messageId":"108","endLine":12,"endColumn":31},{"ruleId":"109","severity":1,"message":"110","line":40,"column":8,"nodeType":"111","endLine":40,"endColumn":10,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":61,"column":43,"nodeType":"107","endLine":61,"endColumn":50},{"ruleId":"109","severity":1,"message":"114","line":64,"column":8,"nodeType":"111","endLine":64,"endColumn":28,"suggestions":"115"},{"ruleId":"109","severity":1,"message":"116","line":38,"column":8,"nodeType":"111","endLine":38,"endColumn":14,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"118","line":57,"column":8,"nodeType":"111","endLine":57,"endColumn":21,"suggestions":"119"},{"ruleId":"105","severity":1,"message":"120","line":73,"column":19,"nodeType":"107","messageId":"108","endLine":73,"endColumn":27},{"ruleId":"105","severity":1,"message":"120","line":175,"column":19,"nodeType":"107","messageId":"108","endLine":175,"endColumn":27},{"ruleId":"121","severity":1,"message":"122","line":303,"column":37,"nodeType":"123","endLine":308,"endColumn":39},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],"no-unused-vars","'setUpdater' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'hasMore'. Either include it or remove the dependency array.","ArrayExpression",["126"],"The ref value 'loader.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'loader.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'handleObserver'. Either include it or remove the dependency array.",["127"],"React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'post'. Either include it or remove the dependency array.",["129"],"'response' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [hasMore]",{"range":"138","text":"139"},"Update the dependencies array to be: [handleObserver, hasMore, isLoading]",{"range":"140","text":"141"},"Update the dependencies array to be: [fetchComments, post]",{"range":"142","text":"143"},"Update the dependencies array to be: [post, post.userId]",{"range":"144","text":"145"},[1650,1652],"[hasMore]",[2200,2220],"[handleObserver, hasMore, isLoading]",[1774,1780],"[fetchComments, post]",[2456,2469],"[post, post.userId]"]