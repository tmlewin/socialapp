[{"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\index.js":"1","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\App.js":"2","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\ErrorBoundary.js":"4","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\context\\updateContext.js":"5","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Feed.jsx":"6","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Header.jsx":"7","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\AuthForm.jsx":"8","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadView.jsx":"9","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\axios.js":"10","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadList.jsx":"11","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Post.jsx":"12","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreatePost.jsx":"13","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadsPage.jsx":"14","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\SearchBar.jsx":"15","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Profile.jsx":"16","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreateThreadComponent.jsx":"17","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\LoadingSpinner.jsx":"18","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\config.js":"19","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Dashboard.jsx":"20","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\PollsPage.jsx":"21","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\PollView.jsx":"22","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Messaging.jsx":"23","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\context\\NotificationContext.js":"24"},{"size":288,"mtime":1727407522622,"results":"25","hashOfConfig":"26"},{"size":3013,"mtime":1729904095952,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1630273694000,"results":"28","hashOfConfig":"26"},{"size":517,"mtime":1727407455446,"results":"29","hashOfConfig":"26"},{"size":89,"mtime":1630273694000,"results":"30","hashOfConfig":"26"},{"size":4188,"mtime":1729909611484,"results":"31","hashOfConfig":"26"},{"size":2321,"mtime":1729903904842,"results":"32","hashOfConfig":"26"},{"size":9459,"mtime":1729036262543,"results":"33","hashOfConfig":"26"},{"size":2754,"mtime":1729011105713,"results":"34","hashOfConfig":"26"},{"size":1089,"mtime":1729466946075,"results":"35","hashOfConfig":"26"},{"size":2899,"mtime":1729906952073,"results":"36","hashOfConfig":"26"},{"size":16974,"mtime":1729459309052,"results":"37","hashOfConfig":"26"},{"size":4952,"mtime":1729459309053,"results":"38","hashOfConfig":"26"},{"size":6738,"mtime":1729907829901,"results":"39","hashOfConfig":"26"},{"size":518,"mtime":1729909060271,"results":"40","hashOfConfig":"26"},{"size":19572,"mtime":1729454004445,"results":"41","hashOfConfig":"26"},{"size":1214,"mtime":1727649745015,"results":"42","hashOfConfig":"26"},{"size":242,"mtime":1728274973892,"results":"43","hashOfConfig":"26"},{"size":155,"mtime":1728842450531,"results":"44","hashOfConfig":"26"},{"size":4056,"mtime":1729213109585,"results":"45","hashOfConfig":"26"},{"size":12629,"mtime":1729309265714,"results":"46","hashOfConfig":"26"},{"size":3179,"mtime":1729298172242,"results":"47","hashOfConfig":"26"},{"size":25829,"mtime":1729911331329,"results":"48","hashOfConfig":"26"},{"size":827,"mtime":1729454004432,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"6010vk",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\index.js",[],["107","108"],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\App.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\ErrorBoundary.js",[],["109","110"],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\context\\updateContext.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Feed.jsx",["111","112","113","114"],"import React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport axios from '../axios';\nimport { updateContext } from '../context/updateContext';\nimport Post from './Post';\nimport SearchBar from './SearchBar';\nimport LoadingSpinner from './LoadingSpinner';\nimport './css/Feed.css';\n\nexport default function Feed() {\n    const [posts, setPosts] = useState([]);\n    const [filteredPosts, setFilteredPosts] = useState([]);\n    const [updater, setUpdater] = useContext(updateContext);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n    const loader = useRef(null);\n\n    const fetchPosts = useCallback(async (pageNum) => {\n        if (!hasMore && pageNum !== 1) return;\n\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await axios.get(`/api/posts?page=${pageNum}&limit=10`);\n            const newPosts = response.data.posts.map(post => ({\n                ...post,\n                userProfilePicture: post.userProfilePicture || post.userId.profilePicture\n            }));\n\n            setPosts(prevPosts => pageNum === 1 ? newPosts : [...prevPosts, ...newPosts]);\n            setFilteredPosts(prevPosts => pageNum === 1 ? newPosts : [...prevPosts, ...newPosts]);\n            setHasMore(response.data.hasMore);\n        } catch (error) {\n            console.error(\"Error fetching posts:\", error);\n            setError(\"Failed to fetch posts. Please try again later.\");\n        } finally {\n            setIsLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        setPage(1);\n        fetchPosts(1);\n    }, [updater, fetchPosts]);\n\n    useEffect(() => {\n        const options = {\n            root: null,\n            rootMargin: \"20px\",\n            threshold: 1.0\n        };\n\n        const observer = new IntersectionObserver(handleObserver, options);\n        if (loader.current) {\n            observer.observe(loader.current);\n        }\n\n        return () => {\n            if (loader.current) {\n                observer.unobserve(loader.current);\n            }\n        };\n    }, [hasMore, isLoading]);\n\n    const handleObserver = useCallback((entities) => {\n        const target = entities[0];\n        if (target.isIntersecting && hasMore && !isLoading) {\n            setPage((prevPage) => prevPage + 1);\n        }\n    }, [hasMore, isLoading]);\n\n    useEffect(() => {\n        if (page > 1) {\n            fetchPosts(page);\n        }\n    }, [page, fetchPosts]);\n\n    const handleSearch = useCallback((searchTerm) => {\n        if (!searchTerm.trim()) {\n            setFilteredPosts(posts);\n        } else {\n            const filtered = posts.filter(post =>\n                post.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                post.title.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n            setFilteredPosts(filtered);\n        }\n    }, [posts]);\n\n    const handlePostUpdate = useCallback((updatedPost) => {\n        setPosts(prevPosts => {\n            const updatedPosts = prevPosts.map(post => \n                post._id === updatedPost._id ? updatedPost : post\n            );\n            return updatedPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n        });\n    }, []);\n\n    const handlePostDelete = useCallback((deletedPostId) => {\n        setPosts(prevPosts => prevPosts.filter(post => post._id !== deletedPostId));\n    }, []);\n\n    return (\n        <div className=\"feed\">\n            <div className=\"feed-search-wrapper\">\n                <SearchBar onSearch={handleSearch} />\n            </div>\n            {filteredPosts.map(post => (\n                <Post \n                    key={post._id} \n                    post={post}\n                    onPostUpdate={handlePostUpdate}\n                    onPostDelete={handlePostDelete}\n                />\n            ))}\n            {isLoading && <LoadingSpinner />}\n            {error && <p className=\"error-message\">{error}</p>}\n            {hasMore && <div ref={loader} style={{ height: '20px', margin: '20px 0' }} />}\n\n        </div>\n    );\n}\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Header.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\AuthForm.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadView.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\axios.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadList.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Post.jsx",["115","116","117","118","119"],"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport DOMPurify from 'dompurify';\nimport './css/Post.css';\nimport { Heart, MessageCircle, Share2, MoreHorizontal, Send, Edit, Trash2, Copy } from 'lucide-react';\nimport axios from '../axios';\nimport { Link } from 'react-router-dom';\nimport config from '../config'; // We'll create this file\n\nexport default function Post({ post, onPostUpdate, onPostDelete }) {\n    console.log('Post object:', post); // Add this line for debugging\n    console.log('UserId:', post.userId); // Add this line for debugging\n\n    const [localPost, setLocalPost] = useState(post);\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n    const [showPostOptions, setShowPostOptions] = useState(false);\n    const [editingPost, setEditingPost] = useState(false);\n    const [editingComment, setEditingComment] = useState(null);\n    const [editedContent, setEditedContent] = useState('');\n    const [commentOptionsId, setCommentOptionsId] = useState(null);\n    const defaultAvatar = \"https://via.placeholder.com/40\";\n\n    const [userProfilePicture, setUserProfilePicture] = useState(post.userProfilePicture || defaultAvatar);\n    const [isLiked, setIsLiked] = useState(false);\n    const [showSharePopup, setShowSharePopup] = useState(false);\n    const [copySuccess, setCopySuccess] = useState('');\n\n    // Add these new refs\n    const postOptionsRef = useRef(null);\n    const commentOptionsRef = useRef(null);\n\n    useEffect(() => {\n        setLocalPost(post);\n        fetchComments();\n        // Check if the current user has liked the post\n        const currentUser = JSON.parse(localStorage.getItem('user'));\n        setIsLiked(post.likes.includes(currentUser._id));\n    }, [post]);\n\n    useEffect(() => {\n        const fetchLatestProfilePicture = async () => {\n            if (!post.userId) {\n                console.error('No userId provided for post:', post);\n                return;\n            }\n            try {\n                const response = await axios.get(`/api/users/${post.userId}`);\n                if (response.data && response.data.profilePicture) {\n                    setUserProfilePicture(response.data.profilePicture);\n                }\n            } catch (error) {\n                console.error('Error fetching latest profile picture:', error.response || error);\n            }\n        };\n\n        fetchLatestProfilePicture();\n    }, [post.userId]);\n\n    const fetchComments = useCallback(async () => {\n        try {\n            const response = await axios.get(`/api/posts/${localPost._id}/comments`);\n            setComments(response.data);\n        } catch (error) {\n            console.error('Error fetching comments:', error);\n        }\n    }, [localPost._id]);\n\n    const handleAddComment = async () => {\n        if (!newComment.trim()) return;\n\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            const response = await axios.post(`/api/posts/${localPost._id}/comments`, {\n                content: newComment,\n                userId: user._id,\n                username: user.username\n            });\n            const updatedComments = await axios.get(`/api/posts/${localPost._id}/comments`);\n            setComments(updatedComments.data);\n            setNewComment('');\n        } catch (error) {\n            console.error('Error adding comment:', error);\n        }\n    };\n\n    const handleEditPost = () => {\n        setEditingPost(true);\n        setEditedContent(localPost.content);\n        setShowPostOptions(false);\n    };\n\n    const handleUpdatePost = async () => {\n        console.log('Attempting to update post:', localPost._id); // Add this line\n        try {\n            const response = await axios.put(`/api/posts/${localPost._id}`, {\n                content: editedContent,\n                userId: localPost.userId\n            });\n            setLocalPost(response.data);\n            setEditingPost(false);\n            console.log('Post updated successfully:', response.data); // Add this line\n            if (typeof onPostUpdate === 'function') {\n                onPostUpdate(response.data);\n            } else {\n                console.warn('onPostUpdate is not a function:', onPostUpdate);\n            }\n        } catch (error) {\n            console.error('Error updating post:', error);\n            if (error.response && error.response.status === 403) {\n                alert('You do not have permission to edit this post.');\n            } else {\n                console.error('An error occurred while updating the post:', error);\n            }\n        }\n    };\n\n    const handleDeletePost = async () => {\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            await axios.delete(`/api/posts/${localPost._id}`, {\n                data: { userId: user._id }\n            });\n            if (typeof onPostDelete === 'function') {\n                onPostDelete(localPost._id);\n            }\n        } catch (error) {\n            console.error('Error deleting post:', error);\n        }\n    };\n\n    const handleEditComment = (comment) => {\n        setEditingComment(comment._id);\n        setEditedContent(comment.content);\n        setCommentOptionsId(null);\n    };\n\n    const handleUpdateComment = async (commentId) => {\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            const response = await axios.put(`/api/posts/${localPost._id}/comments/${commentId}`, {\n                content: editedContent,\n                userId: user._id\n            });\n            \n            // Check if the response contains the updated comment data\n            if (response.data && response.data._id) {\n                const updatedComment = response.data;\n                setComments(comments.map(c => c._id === commentId ? updatedComment : c));\n                setEditingComment(null);\n                setEditedContent('');\n            } else {\n                console.error('Unexpected response format:', response.data);\n            }\n        } catch (error) {\n            console.error('Error updating comment:', error);\n        }\n    };\n\n    const handleDeleteComment = async (commentId) => {\n        try {\n            const user = JSON.parse(localStorage.getItem('user'));\n            await axios.delete(`/api/posts/${localPost._id}/comments/${commentId}`, {\n                data: { userId: user._id }\n            });\n            setComments(comments.filter(c => c._id !== commentId));\n            setCommentOptionsId(null);\n        } catch (error) {\n            console.error('Error deleting comment:', error);\n        }\n    };\n\n    const handleLike = async () => {\n        try {\n            const currentUser = JSON.parse(localStorage.getItem('user'));\n            const response = await axios.put(`/api/posts/${localPost._id}/like`, {\n                userId: currentUser._id\n            });\n\n            // Update local state\n            const updatedLikes = isLiked\n                ? localPost.likes.filter(id => id !== currentUser._id)\n                : [...localPost.likes, currentUser._id];\n\n            setLocalPost(prev => ({\n                ...prev,\n                likes: updatedLikes\n            }));\n            setIsLiked(!isLiked);\n\n            // Call onPostUpdate if it exists\n            if (typeof onPostUpdate === 'function') {\n                onPostUpdate({\n                    ...localPost,\n                    likes: updatedLikes\n                });\n            }\n        } catch (error) {\n            console.error('Error liking/unliking post:', error);\n        }\n    };\n\n    const handleShareClick = () => {\n        setShowSharePopup(true);\n    };\n\n    const copyToClipboard = () => {\n        const postLink = `${window.location.origin}/thread/${localPost.threadId}`;\n        navigator.clipboard.writeText(postLink)\n            .then(() => {\n                setCopySuccess('Link copied!');\n                setTimeout(() => setCopySuccess(''), 2000);\n            })\n            .catch(err => {\n                console.error('Failed to copy: ', err);\n            });\n    };\n\n    // Add this new useEffect hook\n    useEffect(() => {\n        const handleOutsideClick = (event) => {\n            if (postOptionsRef.current && !postOptionsRef.current.contains(event.target)) {\n                setShowPostOptions(false);\n            }\n            if (commentOptionsRef.current && !commentOptionsRef.current.contains(event.target)) {\n                setCommentOptionsId(null);\n            }\n        };\n\n        document.addEventListener('mousedown', handleOutsideClick);\n\n        return () => {\n            document.removeEventListener('mousedown', handleOutsideClick);\n        };\n    }, []);\n\n    const renderContent = () => {\n        const sanitizedContent = DOMPurify.sanitize(localPost.content);\n        return { __html: sanitizedContent };\n    };\n\n    const ContentRenderer = ({ content }) => {\n        const containerRef = useRef(null);\n\n        useEffect(() => {\n            if (containerRef.current) {\n                containerRef.current.innerHTML = content.__html;\n            }\n        }, [content]);\n\n        return <div ref={containerRef} />;\n    };\n\n    return (\n        <div className=\"post\">\n            <div className=\"post-header\">\n                <img \n                    src={userProfilePicture || defaultAvatar} \n                    alt={localPost.user} \n                    className=\"avatar\" \n                    onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n                />\n                <div className=\"post-info\">\n                    <h3>{localPost.user}</h3>\n                    <span>{new Date(localPost.createdAt).toLocaleString()}</span>\n                </div>\n            <div className=\"post-options\">\n                    <MoreHorizontal size={20} className=\"more-options\" onClick={() => setShowPostOptions(!showPostOptions)} />\n                    {showPostOptions && (\n                        <div className=\"options-dropdown\" ref={postOptionsRef}>\n                            <button onClick={handleEditPost}><Edit size={16} /> Edit</button>\n                            <button onClick={handleDeletePost}><Trash2 size={16} /> Delete</button>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className=\"post-content\">\n                {localPost.title && (\n                    <Link to={`/thread/${localPost.threadId}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                        <h4 className=\"thread-title\">{localPost.title}</h4>\n                    </Link>\n                )}\n                {editingPost ? (\n                    <div className=\"edit-post-container\">\n                        <textarea\n                            value={editedContent}\n                            onChange={(e) => setEditedContent(e.target.value)}\n                            className=\"edit-textarea\"\n                        />\n                        <div className=\"edit-buttons\">\n                            <button onClick={handleUpdatePost} className=\"btn btn-save\">Save</button>\n                            <button onClick={() => {\n                                setEditingPost(false);\n                                setEditedContent('');\n                            }} className=\"btn btn-cancel\">Cancel</button>\n                        </div>\n                    </div>\n                ) : (\n                    <>\n                        <ContentRenderer content={renderContent()} />\n                        {localPost.images && localPost.images.length > 0 && (\n                            <div className=\"post-images\">\n                                {localPost.images.map((image, index) => (\n                                    <img \n                                        key={index} \n                                        src={`${config.apiUrl}/${image}`} \n                                        alt={`Post image ${index + 1}`} \n                                        className=\"post-image\"\n                                    />\n                                ))}\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n            <div className=\"post-actions\">\n                <button onClick={handleLike} className={`like-button ${isLiked ? 'liked' : ''}`}>\n                    <Heart size={20} fill={isLiked ? \"#ff0000\" : \"none\"} stroke={isLiked ? \"#ff0000\" : \"currentColor\"} />\n                    {localPost && localPost.likes ? localPost.likes.length : 0}\n                </button>\n                <button><MessageCircle size={20} /> {comments ? comments.length : 0}</button>\n                <button onClick={handleShareClick}><Share2 size={20} /></button>\n            </div>\n            {showSharePopup && (\n                <div className=\"share-popup\">\n                    <div className=\"share-popup-content\">\n                        <h4>Share this post</h4>\n                        <div className=\"share-link\">\n                            <input \n                                type=\"text\" \n                                value={`${window.location.origin}/thread/${localPost.threadId}`} \n                                readOnly \n                            />\n                            <button onClick={copyToClipboard}>\n                                <Copy size={20} />\n                            </button>\n                        </div>\n                        {copySuccess && <p className=\"copy-success\">{copySuccess}</p>}\n                        <button onClick={() => setShowSharePopup(false)} className=\"close-popup\">Close</button>\n                    </div>\n                </div>\n            )}\n            <div className=\"post-comments\">\n                {comments.map((comment) => (\n                    <div key={comment._id} className=\"comment\">\n                        <img \n                            src={comment.userProfilePicture || defaultAvatar} \n                            alt={comment.username} \n                            className=\"avatar-small\" \n                            onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n                        />\n                        <div className=\"comment-content\">\n                            <strong>{comment.username}</strong>\n                            {editingComment === comment._id ? (\n                                <div className=\"edit-comment-container\">\n                                    <textarea\n                                        value={editedContent}\n                                        onChange={(e) => setEditedContent(e.target.value)}\n                                        className=\"edit-textarea\"\n                                    />\n                                    <div className=\"edit-buttons\">\n                                        <button onClick={() => handleUpdateComment(comment._id)} className=\"btn btn-save\">Save</button>\n                                        <button onClick={() => {\n                                            setEditingComment(null);\n                                            setEditedContent('');\n                                        }} className=\"btn btn-cancel\">Cancel</button>\n                                    </div>\n                                </div>\n                            ) : (\n                                <p>{comment.content}</p>\n                            )}\n                        </div>\n                        <div className=\"comment-options\">\n                            <MoreHorizontal size={16} onClick={() => setCommentOptionsId(comment._id)} />\n                            {commentOptionsId === comment._id && (\n                                <div className=\"options-dropdown\" ref={commentOptionsRef}>\n                                    <button onClick={() => handleEditComment(comment)}><Edit size={14} /> Edit</button>\n                                    <button onClick={() => handleDeleteComment(comment._id)}><Trash2 size={14} /> Delete</button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"post-comment-input\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Write a comment...\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            e.preventDefault();\n                            handleAddComment();\n                        }\n                    }}\n                />\n                <button onClick={handleAddComment}><Send size={20} /></button>\n            </div>\n        </div>\n    );\n}\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreatePost.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\ThreadsPage.jsx",["120"],"import React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport { Filter, Search, Plus, X } from 'lucide-react';\nimport CreateThreadComponent from './CreateThreadComponent';\nimport ThreadList from './ThreadList';\nimport './css/ThreadsPage.css';\n\nconst ThreadsPage = () => {\n    const [threads, setThreads] = useState([]);\n    const [filteredThreads, setFilteredThreads] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [showCreateThread, setShowCreateThread] = useState(false);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [showFilters, setShowFilters] = useState(false);\n    const [filters, setFilters] = useState({\n        sortBy: 'newest', // newest, oldest, mostActive\n        timeFrame: 'all', // all, today, week, month\n    });\n\n    useEffect(() => {\n        fetchThreads();\n    }, []);\n\n    useEffect(() => {\n        filterThreads();\n    }, [threads, searchTerm, filters]);\n\n    const fetchThreads = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.get('/api/threads');\n            setThreads(response.data);\n            setFilteredThreads(response.data);\n            setLoading(false);\n        } catch (err) {\n            console.error('Error fetching threads:', err);\n            setError('Failed to fetch threads. Please try again later.');\n            setLoading(false);\n        }\n    };\n\n    const filterThreads = () => {\n        let filtered = [...threads];\n\n        // Apply search filter\n        if (searchTerm) {\n            filtered = filtered.filter(thread =>\n                thread.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                thread.user.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n        }\n\n        // Apply time frame filter\n        if (filters.timeFrame !== 'all') {\n            const now = new Date();\n            const timeFrames = {\n                today: 24 * 60 * 60 * 1000,\n                week: 7 * 24 * 60 * 60 * 1000,\n                month: 30 * 24 * 60 * 60 * 1000\n            };\n            filtered = filtered.filter(thread => {\n                const threadDate = new Date(thread.createdAt);\n                return now - threadDate <= timeFrames[filters.timeFrame];\n            });\n        }\n\n        // Apply sorting\n        filtered.sort((a, b) => {\n            switch (filters.sortBy) {\n                case 'oldest':\n                    return new Date(a.createdAt) - new Date(b.createdAt);\n                case 'mostActive':\n                    return (b.postCount || 0) - (a.postCount || 0);\n                case 'newest':\n                default:\n                    return new Date(b.createdAt) - new Date(a.createdAt);\n            }\n        });\n\n        setFilteredThreads(filtered);\n    };\n\n    const handleThreadCreated = (newThread) => {\n        setThreads(prevThreads => [newThread, ...prevThreads]);\n        setShowCreateThread(false);\n    };\n\n    const handleSearch = (e) => {\n        setSearchTerm(e.target.value);\n    };\n\n    const clearSearch = () => {\n        setSearchTerm('');\n    };\n\n    if (loading) return <div className=\"loading-spinner\">Loading threads...</div>;\n    if (error) return <div className=\"error-message\">Error: {error}</div>;\n\n    return (\n        <div className=\"threads-page\">\n            <div className=\"threads-header\">\n                <h1>Forum Discussions</h1>\n                <button \n                    className=\"create-thread-btn\"\n                    onClick={() => setShowCreateThread(true)}\n                >\n                    <Plus size={20} />\n                    New Thread\n                </button>\n            </div>\n\n            <div className=\"threads-controls\">\n                <div className=\"threads-search-bar\">\n                    <Search size={20} className=\"search-icon\" />\n                    <input \n                        type=\"text\" \n                        placeholder=\"Search threads...\"\n                        value={searchTerm}\n                        onChange={handleSearch}\n                    />\n                    {searchTerm && (\n                        <button className=\"clear-search\" onClick={clearSearch}>\n                            <X size={16} />\n                        </button>\n                    )}\n                </div>\n                \n                <button \n                    className={`filter-btn ${showFilters ? 'active' : ''}`}\n                    onClick={() => setShowFilters(!showFilters)}\n                >\n                    <Filter size={20} />\n                    Filter\n                </button>\n            </div>\n\n            {showFilters && (\n                <div className=\"filter-options\">\n                    <div className=\"filter-group\">\n                        <label>Sort by:</label>\n                        <select \n                            value={filters.sortBy}\n                            onChange={(e) => setFilters({...filters, sortBy: e.target.value})}\n                        >\n                            <option value=\"newest\">Newest First</option>\n                            <option value=\"oldest\">Oldest First</option>\n                            <option value=\"mostActive\">Most Active</option>\n                        </select>\n                    </div>\n                    <div className=\"filter-group\">\n                        <label>Time Frame:</label>\n                        <select \n                            value={filters.timeFrame}\n                            onChange={(e) => setFilters({...filters, timeFrame: e.target.value})}\n                        >\n                            <option value=\"all\">All Time</option>\n                            <option value=\"today\">Today</option>\n                            <option value=\"week\">This Week</option>\n                            <option value=\"month\">This Month</option>\n                        </select>\n                    </div>\n                </div>\n            )}\n\n            {showCreateThread && (\n                <div className=\"create-thread-modal\">\n                    <CreateThreadComponent \n                        onThreadCreated={handleThreadCreated}\n                        onClose={() => setShowCreateThread(false)}\n                    />\n                </div>\n            )}\n\n            {filteredThreads.length === 0 ? (\n                <div className=\"no-threads\">\n                    <p>No threads found. {searchTerm ? 'Try a different search term.' : 'Be the first to create a thread!'}</p>\n                </div>\n            ) : (\n                <ThreadList threads={filteredThreads} />\n            )}\n        </div>\n    );\n};\n\nexport default ThreadsPage;\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\SearchBar.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Profile.jsx",["121","122"],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from '../axios';\nimport './css/Profile.css';\nimport { MessageSquare, PenTool, Vote, Award } from 'lucide-react';\nimport Messaging from './Messaging';\n\nconst Profile = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const [user, setUser] = useState(null);\n    const [formData, setFormData] = useState({});\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [activeTab, setActiveTab] = useState('profile');\n    const [newProfilePicture, setNewProfilePicture] = useState(null);\n    const [preview, setPreview] = useState('');\n    const [activityFeed, setActivityFeed] = useState([]);\n    const [achievements, setAchievements] = useState([]);\n    const [updateNotificationCount, setUpdateNotificationCount] = useState(() => () => {});\n\n    const formatDate = (dateString) => {\n        if (!dateString) return '';\n        const date = new Date(dateString);\n        return date instanceof Date && !isNaN(date) \n            ? date.toISOString().split('T')[0]\n            : '';\n    };\n\n    useEffect(() => {\n        const fetchUserProfile = async () => {\n            try {\n                const response = await axios.get('/api/users/profile');\n                setUser(response.data);\n                setFormData({\n                    ...response.data,\n                    dateOfBirth: formatDate(response.data.dateOfBirth)\n                });\n                // Set the preview to the user's profile picture\n                setPreview(response.data.profilePicture);\n\n                // Trigger achievement check\n                await axios.post('/api/achievements/check');\n                \n                // Fetch updated achievements\n                const achievementsResponse = await axios.get('/api/achievements');\n                setAchievements(achievementsResponse.data);\n            } catch (error) {\n                console.error('Error fetching user profile:', error);\n                if (error.response && error.response.status === 401) {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('user');\n                    navigate('/login');\n                } else {\n                    setError('Failed to load profile. Please try again.');\n                }\n            }\n        };\n\n        fetchUserProfile();\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchUserActivity = async () => {\n            try {\n                const response = await axios.get('/api/users/activity');\n                setActivityFeed(response.data);\n            } catch (error) {\n                console.error('Error fetching user activity:', error);\n                setError('Failed to load user activity. Please try again.');\n            }\n        };\n\n        if (user) {\n            fetchUserActivity();\n        }\n    }, [user]);\n\n    useEffect(() => {\n        const fetchAchievements = async () => {\n            try {\n                const [userAchievements, allAchievements] = await Promise.all([\n                    axios.get('/api/achievements'),\n                    axios.get('/api/achievements/all')\n                ]);\n                console.log('Fetched user achievements:', userAchievements.data);\n                console.log('All available achievements:', allAchievements.data);\n                console.log('Number of all achievements:', allAchievements.data.length);\n                setAchievements(userAchievements.data);\n            } catch (error) {\n                console.error('Error fetching achievements:', error);\n            }\n        };\n\n        if (user) {\n            fetchAchievements();\n        }\n    }, [user]);\n\n    useEffect(() => {\n        // Set active tab if provided in location state\n        if (location.state && location.state.activeTab) {\n            setActiveTab(location.state.activeTab);\n        }\n    }, [location]);\n\n    useEffect(() => {\n        const fetchUnreadCount = async () => {\n            try {\n                const response = await axios.get('/api/messages/unread-count');\n                // Assuming you have a way to update the notification count in the Header component\n                // This could be through a global state management solution or a callback passed down from App.js\n                if (typeof window.updateHeaderNotificationCount === 'function') {\n                    window.updateHeaderNotificationCount(response.data.count);\n                }\n            } catch (error) {\n                console.error('Error fetching unread message count:', error);\n            }\n        };\n\n        setUpdateNotificationCount(() => fetchUnreadCount);\n    }, []);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        if (name === 'dateOfBirth') {\n            // For date inputs, store the value as is\n            setFormData({ ...formData, [name]: value });\n        } else {\n            setFormData({ ...formData, [name]: value });\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setError('');\n        setSuccess('');\n\n        const formDataToSubmit = new FormData();\n        if (newProfilePicture) {\n            formDataToSubmit.append('profilePicture', newProfilePicture);\n        }\n\n        // Append other form data\n        for (const key in formData) {\n            formDataToSubmit.append(key, formData[key]);\n        }\n\n        try {\n            const response = await axios.put('/api/users/profile', formDataToSubmit, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            setUser(response.data);\n            setFormData({\n                ...response.data,\n                dateOfBirth: formatDate(response.data.dateOfBirth)\n            });\n            setSuccess('Profile updated successfully!');\n            setPreview(''); // Clear the preview after successful upload\n            setNewProfilePicture(null); // Clear the selected file\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            setError('Failed to update profile. Please try again.');\n        }\n    };\n\n    const handlePasswordChange = async (e) => {\n        e.preventDefault();\n        setError('');\n        setSuccess('');\n        if (formData.newPassword !== formData.confirmPassword) {\n            setError('New passwords do not match.');\n            return;\n        }\n        try {\n            await axios.put('/api/users/change-password', {\n                currentPassword: formData.currentPassword,\n                newPassword: formData.newPassword\n            });\n            setSuccess('Password changed successfully!');\n            setFormData({...formData, currentPassword: '', newPassword: '', confirmPassword: ''});\n        } catch (error) {\n            console.error('Error changing password:', error);\n            setError('Failed to change password. Please check your current password and try again.');\n        }\n    };\n\n    const handleImageChange = (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            setNewProfilePicture(file);\n            const reader = new FileReader();\n            reader.onloadend = () => {\n                setPreview(reader.result);\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n    const renderActivityItem = (activity) => {\n        switch (activity.type) {\n            case 'post':\n                return (\n                    <div className=\"activity-item\">\n                        <PenTool size={16} />\n                        <span>Created a post: {activity.content}</span>\n                    </div>\n                );\n            case 'comment':\n                return (\n                    <div className=\"activity-item\">\n                        <MessageSquare size={16} />\n                        <span>Commented on a post: {activity.content}</span>\n                    </div>\n                );\n            case 'poll':\n                return (\n                    <div className=\"activity-item\">\n                        <Vote size={16} />\n                        <span>Created a poll: {activity.content}</span>\n                    </div>\n                );\n            case 'vote':\n                return (\n                    <div className=\"activity-item\">\n                        <Vote size={16} />\n                        <span>Voted on a poll: {activity.content}</span>\n                    </div>\n                );\n            default:\n                return null;\n        }\n    };\n\n    const renderAchievements = () => {\n        const allAchievements = [\n            { name: 'First Post', icon: '📝', description: 'Create your first post' },\n            { name: 'Prolific Poster', icon: '✍️', description: 'Create 10 posts' },\n            { name: 'Power Poster', icon: '🚀', description: 'Create 50 posts' },\n            { name: 'Comment Contributor', icon: '💬', description: 'Leave your first comment' },\n            { name: 'Frequent Commenter', icon: '🗨️', description: 'Leave 10 comments' },\n            { name: 'Discussion Master', icon: '🏆', description: 'Leave 50 comments' },\n            { name: 'Poll Creator', icon: '📊', description: 'Create your first poll' },\n            { name: 'Active Voter', icon: '🗳️', description: 'Vote in 5 polls' },\n        ];\n\n        return (\n            <div className=\"achievements-section\">\n                <h2>Achievements</h2>\n                <div className=\"achievements-list\">\n                    {allAchievements.map((achievement) => {\n                        const userHasAchievement = achievements.some(a => a.name === achievement.name);\n                        return (\n                            <div key={achievement.name} className={`achievement-item ${userHasAchievement ? '' : 'achievement-locked'}`}>\n                                <div className=\"achievement-icon\" role=\"img\" aria-label={achievement.name}>\n                                    {achievement.icon}\n                                </div>\n                                <div className=\"achievement-info\">\n                                    <h3>{achievement.name}</h3>\n                                    <p>{achievement.description}</p>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    };\n\n    if (!user) return <div className=\"loading\">Loading...</div>;\n\n    return (\n        <div className=\"profile-container\">\n            <div className=\"profile-header\">\n                <div className=\"profile-picture-container\">\n                    <img\n                        src={preview || user.profilePicture || \"https://via.placeholder.com/100\"}\n                        alt=\"Profile\"\n                        className=\"profile-picture\"\n                        onError={(e) => { e.target.onerror = null; e.target.src = \"https://via.placeholder.com/100\"; }}\n                    />\n                    <div className=\"overlay\">\n                        <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleImageChange}\n                            style={{ display: 'none' }}\n                            id=\"file-input\"\n                        />\n                        <label htmlFor=\"file-input\" className=\"edit-icon\">\n                            <span>Edit</span>\n                        </label>\n                    </div>\n                </div>\n                <div className=\"profile-info\">\n                    <h1>{user.displayName || user.username}</h1>\n                    <p className=\"username\">@{user.username}</p>\n                    <p className=\"email\">{user.email}</p>\n                </div>\n            </div>\n\n            {error && <div className=\"error-message\">{error}</div>}\n            {success && <div className=\"success-message\">{success}</div>}\n\n            <div className=\"profile-tabs\">\n                <button \n                    className={`tab ${activeTab === 'profile' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('profile')}\n                >\n                    Profile Information\n                </button>\n                <button \n                    className={`tab ${activeTab === 'activity' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('activity')}\n                >\n                    Activity Feed\n                </button>\n                <button \n                    className={`tab ${activeTab === 'password' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('password')}\n                >\n                    Change Password\n                </button>\n                <button \n                    className={`tab ${activeTab === 'achievements' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('achievements')}\n                >\n                    Achievements\n                </button>\n                <button \n                    className={`tab ${activeTab === 'messaging' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('messaging')}\n                >\n                    Messaging\n                </button>\n            </div>\n\n            <div className=\"profile-content\">\n                {activeTab === 'profile' && (\n                    <form onSubmit={handleSubmit} className=\"profile-form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"displayName\">Display Name</label>\n                            <input\n                                type=\"text\"\n                                id=\"displayName\"\n                                name=\"displayName\"\n                                value={formData.displayName || ''}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"fullName\">Full Name</label>\n                            <input\n                                type=\"text\"\n                                id=\"fullName\"\n                                name=\"fullName\"\n                                value={formData.fullName || ''}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dateOfBirth\">Date of Birth</label>\n                            <input\n                                type=\"date\"\n                                id=\"dateOfBirth\"\n                                name=\"dateOfBirth\"\n                                value={formData.dateOfBirth || ''}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"location\">Location</label>\n                            <input\n                                type=\"text\"\n                                id=\"location\"\n                                name=\"location\"\n                                value={formData.location || ''}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"bio\">Bio</label>\n                            <textarea\n                                id=\"bio\"\n                                name=\"bio\"\n                                value={formData.bio || ''}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"website\">Website</label>\n                            <input\n                                type=\"url\"\n                                id=\"website\"\n                                name=\"website\"\n                                value={formData.website || ''}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <button type=\"submit\" className=\"submit-button\">Save Changes</button>\n                    </form>\n                )}\n\n                {activeTab === 'activity' && (\n                    <div className=\"activity-feed\">\n                        <h2>Recent Activity</h2>\n                        {activityFeed.length === 0 ? (\n                            <p>No recent activity.</p>\n                        ) : (\n                            activityFeed.map((activity, index) => (\n                                <div key={index} className=\"activity-item-container\">\n                                    {renderActivityItem(activity)}\n                                    <span className=\"activity-date\">{new Date(activity.date).toLocaleDateString()}</span>\n                                </div>\n                            ))\n                        )}\n                    </div>\n                )}\n\n                {activeTab === 'password' && (\n                    <form onSubmit={handlePasswordChange} className=\"password-form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"currentPassword\">Current Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"currentPassword\"\n                                name=\"currentPassword\"\n                                value={formData.currentPassword || ''}\n                                onChange={handleInputChange}\n                                required\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"newPassword\">New Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"newPassword\"\n                                name=\"newPassword\"\n                                value={formData.newPassword || ''}\n                                onChange={handleInputChange}\n                                required\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"confirmPassword\">Confirm New Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"confirmPassword\"\n                                name=\"confirmPassword\"\n                                value={formData.confirmPassword || ''}\n                                onChange={handleInputChange}\n                                required\n                            />\n                        </div>\n                        <button type=\"submit\" className=\"submit-button\">Change Password</button>\n                    </form>\n                )}\n\n                {activeTab === 'achievements' && renderAchievements()}\n                {activeTab === 'messaging' && <Messaging userId={user._id} />}\n            </div>\n        </div>\n    );\n};\n\nexport default Profile;\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\CreateThreadComponent.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\LoadingSpinner.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\config.js",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Dashboard.jsx",[],"C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\PollsPage.jsx",["123"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PlusCircle, Vote, Edit, Trash, Clock, Share2, Copy, Twitter, Facebook } from 'lucide-react';\nimport axios from '../axios';\nimport './css/PollsPage.css';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst PollsPage = () => {\n    const [polls, setPolls] = useState([]);\n    const [showCreatePoll, setShowCreatePoll] = useState(false);\n    const [newPoll, setNewPoll] = useState({\n        question: '',\n        options: ['', ''],\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().slice(0, 16)\n    });\n    const [editingPoll, setEditingPoll] = useState(null);\n    const [error, setError] = useState('');\n    const [currentUser, setCurrentUser] = useState(null);\n    const [shareUrl, setShareUrl] = useState('');\n    const [copySuccess, setCopySuccess] = useState('');\n    const [hasMore, setHasMore] = useState(true);\n    const [page, setPage] = useState(1);\n    const [loading, setLoading] = useState(true);\n\n    const fetchPolls = useCallback(async (isInitialLoad = false) => {\n        try {\n            setLoading(true);\n            const response = await axios.get(`/api/polls?page=${isInitialLoad ? 1 : page}&limit=10`);\n            const newPolls = response.data.polls;\n            setPolls(prevPolls => isInitialLoad ? newPolls : [...prevPolls, ...newPolls]);\n            setHasMore(response.data.hasMore);\n            setPage(prevPage => isInitialLoad ? 2 : prevPage + 1);\n        } catch (error) {\n            console.error('Error fetching polls:', error);\n            setError('Failed to fetch polls. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    }, [page]);\n\n    useEffect(() => {\n        const user = JSON.parse(localStorage.getItem('user'));\n        setCurrentUser(user);\n\n        fetchPolls(true);\n\n        return () => {\n            // Cleanup function\n            setPolls([]);\n            setPage(1);\n            setHasMore(true);\n        };\n    }, []);\n\n    const handleCreatePoll = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post('/api/polls', newPoll);\n            setPolls([response.data, ...polls]);\n            setShowCreatePoll(false);\n            setNewPoll({\n                question: '',\n                options: ['', ''],\n                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().slice(0, 16)\n            });\n        } catch (error) {\n            console.error('Error creating poll:', error);\n            setError('Failed to create poll. Please try again.');\n        }\n    };\n\n    const handleVote = async (pollId, optionId) => {\n        try {\n            const response = await axios.put(`/api/polls/${pollId}/vote`, { optionId });\n            setPolls(polls.map(poll => poll._id === pollId ? response.data : poll));\n        } catch (error) {\n            console.error('Error voting:', error);\n            setError(error.response?.data?.message || 'Failed to vote. Please try again.');\n        }\n    };\n\n    const handleEditPoll = async (e) => {\n        e.preventDefault();\n        try {\n            const pollToEdit = {\n                ...editingPoll,\n                expiresAt: editingPoll.expiresAt ? new Date(editingPoll.expiresAt).toISOString() : new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\n            };\n            const response = await axios.put(`/api/polls/${editingPoll._id}`, pollToEdit);\n            setPolls(polls.map(poll => poll._id === editingPoll._id ? response.data : poll));\n            setEditingPoll(null);\n        } catch (error) {\n            console.error('Error editing poll:', error);\n            setError('Failed to edit poll. Please try again.');\n        }\n    };\n\n    const handleDeletePoll = async (pollId) => {\n        try {\n            await axios.delete(`/api/polls/${pollId}`);\n            setPolls(polls.filter(poll => poll._id !== pollId));\n        } catch (error) {\n            console.error('Error deleting poll:', error);\n            setError('Failed to delete poll. Please try again.');\n        }\n    };\n\n    const handleAddOption = () => {\n        if (editingPoll) {\n            setEditingPoll({ ...editingPoll, options: [...editingPoll.options, { name: '', votes: 0 }] });\n        } else {\n            setNewPoll({ ...newPoll, options: [...newPoll.options, ''] });\n        }\n    };\n\n    const isPollExpired = (expiresAt) => {\n        return new Date() > new Date(expiresAt);\n    };\n\n    const handleShare = (pollId) => {\n        const url = `${window.location.origin}/polls/${pollId}`;\n        setShareUrl(url);\n    };\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(shareUrl)\n            .then(() => {\n                setCopySuccess('Copied!');\n                setTimeout(() => setCopySuccess(''), 2000);\n            })\n            .catch(err => console.error('Failed to copy: ', err));\n    };\n\n    const shareOnTwitter = () => {\n        const twitterUrl = `https://twitter.com/intent/tweet?text=Check out this poll!&url=${encodeURIComponent(shareUrl)}`;\n        window.open(twitterUrl, '_blank');\n    };\n\n    const shareOnFacebook = () => {\n        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;\n        window.open(facebookUrl, '_blank');\n    };\n\n    return (\n        <div className=\"polls-page\">\n            <h1>User Polls</h1>\n            {error && <div className=\"error-message\">{error}</div>}\n            <button className=\"create-poll-btn\" onClick={() => setShowCreatePoll(!showCreatePoll)}>\n                <PlusCircle size={20} />\n                Create New Poll\n            </button>\n\n            {(showCreatePoll || editingPoll) && (\n                <div className=\"create-poll-form\">\n                    <h2>{editingPoll ? 'Edit Poll' : 'Create a New Poll'}</h2>\n                    <form onSubmit={editingPoll ? handleEditPoll : handleCreatePoll}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter your question\"\n                            value={editingPoll ? editingPoll.question : newPoll.question}\n                            onChange={(e) => editingPoll ? setEditingPoll({ ...editingPoll, question: e.target.value }) : setNewPoll({ ...newPoll, question: e.target.value })}\n                            required\n                        />\n                        {(editingPoll ? editingPoll.options : newPoll.options).map((option, index) => (\n                            <input\n                                key={index}\n                                type=\"text\"\n                                placeholder={`Option ${index + 1}`}\n                                value={editingPoll ? option.name : option}\n                                onChange={(e) => {\n                                    if (editingPoll) {\n                                        const newOptions = [...editingPoll.options];\n                                        newOptions[index].name = e.target.value;\n                                        setEditingPoll({ ...editingPoll, options: newOptions });\n                                    } else {\n                                        const newOptions = [...newPoll.options];\n                                        newOptions[index] = e.target.value;\n                                        setNewPoll({ ...newPoll, options: newOptions });\n                                    }\n                                }}\n                                required\n                            />\n                        ))}\n                        <button type=\"button\" onClick={handleAddOption}>Add Option</button>\n                        <input\n                            type=\"datetime-local\"\n                            value={editingPoll ? (editingPoll.expiresAt ? editingPoll.expiresAt.slice(0, 16) : '') : newPoll.expiresAt}\n                            onChange={(e) => editingPoll ? setEditingPoll({ ...editingPoll, expiresAt: e.target.value }) : setNewPoll({ ...newPoll, expiresAt: e.target.value })}\n                            required\n                        />\n                        <button type=\"submit\">{editingPoll ? 'Save Changes' : 'Create Poll'}</button>\n                        {editingPoll && <button type=\"button\" onClick={() => setEditingPoll(null)}>Cancel</button>}\n                    </form>\n                </div>\n            )}\n\n            {loading && polls.length === 0 ? (\n                <div>Loading polls...</div>\n            ) : (\n                <InfiniteScroll\n                    dataLength={polls.length}\n                    next={() => fetchPolls(false)}\n                    hasMore={hasMore}\n                    loader={<h4>Loading more polls...</h4>}\n                    endMessage={\n                        <p style={{ textAlign: 'center', margin: '20px 0' }}>\n                            You have seen all polls\n                        </p>\n                    }\n                >\n                    <div className=\"polls-list\">\n                        {polls.map((poll) => (\n                            <div key={poll._id} className=\"poll-item\">\n                                <h2>{poll.question}</h2>\n                                <ResponsiveContainer width=\"100%\" height={300}>\n                                    <BarChart data={poll.options}>\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Legend />\n                                        <Bar dataKey=\"votes\" fill=\"#8884d8\" />\n                                    </BarChart>\n                                </ResponsiveContainer>\n                                <div className=\"poll-options\">\n                                    {!isPollExpired(poll.expiresAt) && poll.options.map((option) => (\n                                        <button key={option._id} onClick={() => handleVote(poll._id, option._id)}>\n                                            Vote for {option.name}\n                                        </button>\n                                    ))}\n                                </div>\n                                <div className=\"poll-actions\">\n                                    {currentUser && currentUser._id === poll.createdBy && (\n                                        <>\n                                            <button onClick={() => setEditingPoll(poll)}><Edit size={16} /> Edit</button>\n                                            <button onClick={() => handleDeletePoll(poll._id)}><Trash size={16} /> Delete</button>\n                                        </>\n                                    )}\n                                    <button onClick={() => handleShare(poll._id)}><Share2 size={16} /> Share</button>\n                                </div>\n                                <div className=\"poll-stats\">\n                                    <Vote size={20} />\n                                    <span>Total Votes: {poll.options.reduce((sum, option) => sum + option.votes, 0)}</span>\n                                    <Clock size={20} />\n                                    <span>{isPollExpired(poll.expiresAt) ? 'Expired' : `Expires: ${new Date(poll.expiresAt).toLocaleString()}`}</span>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </InfiniteScroll>\n            )}\n\n            {shareUrl && (\n                <div className=\"share-modal\">\n                    <h3>Share this poll</h3>\n                    <div className=\"share-url\">\n                        <input type=\"text\" value={shareUrl} readOnly />\n                        <button onClick={copyToClipboard}><Copy size={16} /> {copySuccess || 'Copy'}</button>\n                    </div>\n                    <div className=\"share-social\">\n                        <button onClick={shareOnTwitter}><Twitter size={16} /> Share on Twitter</button>\n                        <button onClick={shareOnFacebook}><Facebook size={16} /> Share on Facebook</button>\n                    </div>\n                    <button onClick={() => setShareUrl('')}>Close</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PollsPage;\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\PollView.jsx",["124"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { Vote, Clock } from 'lucide-react';\r\nimport axios from '../axios';\r\nimport './css/PollsPage.css';\r\n\r\nconst PollView = () => {\r\n    const { pollId } = useParams();\r\n    const [poll, setPoll] = useState(null);\r\n    const [error, setError] = useState('');\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchPoll = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/polls/${pollId}`);\r\n                setPoll(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching poll:', error);\r\n                setError('Failed to fetch poll. Please try again.');\r\n            }\r\n        };\r\n\r\n        fetchPoll();\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        setCurrentUser(user);\r\n    }, [pollId]);\r\n\r\n    const handleVote = async (optionId) => {\r\n        try {\r\n            const response = await axios.put(`/api/polls/${pollId}/vote`, { optionId });\r\n            setPoll(response.data);\r\n        } catch (error) {\r\n            console.error('Error voting:', error);\r\n            setError(error.response?.data?.message || 'Failed to vote. Please try again.');\r\n        }\r\n    };\r\n\r\n    const isPollExpired = (expiresAt) => {\r\n        return new Date() > new Date(expiresAt);\r\n    };\r\n\r\n    if (!poll) return <div className=\"polls-page\">Loading...</div>;\r\n    if (error) return <div className=\"polls-page error-message\">{error}</div>;\r\n\r\n    return (\r\n        <div className=\"polls-page\">\r\n            <h1>Poll Details</h1>\r\n            <div className=\"poll-item\">\r\n                <h2>{poll.question}</h2>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart data={poll.options}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"votes\" fill=\"#8884d8\" />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n                <div className=\"poll-options\">\r\n                    {!isPollExpired(poll.expiresAt) && poll.options.map((option) => (\r\n                        <button key={option._id} onClick={() => handleVote(option._id)}>\r\n                            Vote for {option.name}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div className=\"poll-stats\">\r\n                    <Vote size={20} />\r\n                    <span>Total Votes: {poll.options.reduce((sum, option) => sum + option.votes, 0)}</span>\r\n                    <Clock size={20} />\r\n                    <span>{isPollExpired(poll.expiresAt) ? 'Expired' : `Expires: ${new Date(poll.expiresAt).toLocaleString()}`}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PollView;\r\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\components\\Messaging.jsx",["125","126","127"],"import React, { useState, useRef, useEffect } from 'react';\nimport { Inbox, Send, Trash2, Edit, Search, Star, X, Paperclip, File, Archive } from 'lucide-react';\nimport './css/Messaging.css';\nimport axios from '../axios';\nimport { useNotification } from '../context/NotificationContext';\nimport SearchBar from './SearchBar';\n\nconst Messaging = ({ userId }) => {\n    const { updateUnreadCount } = useNotification();\n    const [activeCategory, setActiveCategory] = useState('inbox');\n    const [messages, setMessages] = useState([]);\n    const [selectedMessage, setSelectedMessage] = useState(null);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [showNewMessageModal, setShowNewMessageModal] = useState(false);\n    const [newMessage, setNewMessage] = useState({ to: '', subject: '', content: '', attachment: null });\n    const fileInputRef = useRef(null);\n    const [showReplyModal, setShowReplyModal] = useState(false);\n    const [replyMessage, setReplyMessage] = useState({ content: '', attachment: null });\n    const [threadMessages, setThreadMessages] = useState([]);\n    const [showQuickReplyOptions, setShowQuickReplyOptions] = useState(false);\n    const [customQuickReply, setCustomQuickReply] = useState('');\n    const [isThreadCollapsed, setIsThreadCollapsed] = useState(false);\n\n    useEffect(() => {\n        fetchMessages();\n        setSelectedMessage(null);\n    }, [activeCategory]);\n\n    const fetchMessages = async () => {\n        try {\n            let response;\n            if (activeCategory === 'inbox') {\n                response = await axios.get('/api/messages/inbox');\n            } else if (activeCategory === 'sent') {\n                response = await axios.get('/api/messages/sent');\n            } else if (activeCategory === 'drafts') {\n                response = await axios.get('/api/messages/drafts');\n            }\n            console.log(`Fetched ${activeCategory} messages:`, response.data);\n            setMessages(response.data);\n        } catch (error) {\n            console.error(`Error fetching ${activeCategory} messages:`, error);\n            setMessages([]);\n        }\n    };\n\n    const handleDeleteMessage = async (messageId) => {\n        try {\n            if (activeCategory === 'drafts') {\n                await axios.delete(`/api/messages/${messageId}`);\n            } else {\n                await axios.put(`/api/messages/${messageId}/draft`);\n            }\n            setMessages(messages.filter(m => m._id !== messageId));\n            setSelectedMessage(null);\n            // Fetch messages again to update the current category\n            fetchMessages();\n        } catch (error) {\n            console.error('Error deleting/moving message:', error);\n            alert('Failed to delete/move message. Please try again.');\n        }\n    };\n\n    const handleRestoreMessage = async (messageId) => {\n        try {\n            await axios.put(`/api/messages/${messageId}/restore`);\n            setMessages(messages.filter(m => m._id !== messageId));\n            setSelectedMessage(null);\n        } catch (error) {\n            console.error('Error restoring message:', error);\n            alert('Failed to restore message. Please try again.');\n        }\n    };\n\n    const filteredMessages = messages.filter(message => {\n        const searchableText = activeCategory === 'inbox'\n            ? `${message.sender.username} ${message.subject} ${message.content}`\n            : `${message.recipient.username} ${message.subject} ${message.content}`;\n        return searchableText.toLowerCase().includes(searchTerm.toLowerCase());\n    });\n\n    const renderMessageList = () => {\n        if (filteredMessages.length === 0) {\n            return <div className=\"no-messages\">No messages in {activeCategory}</div>;\n        }\n\n        return filteredMessages.map(message => (\n            <div \n                key={message._id} \n                className={`message-item ${!message.read ? 'unread' : ''} ${message.starred ? 'starred' : ''} ${selectedMessage && selectedMessage._id === message._id ? 'selected' : ''}`}\n                onClick={() => handleSelectMessage(message)}\n            >\n                <div className=\"message-item-content\">\n                    <div className=\"message-header\">\n                        <span className=\"message-from\">\n                            {activeCategory === 'inbox' ? message.sender.username : message.recipient.username}\n                        </span>\n                        <span className=\"message-date\">{new Date(message.createdAt).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"message-subject\">{message.subject}</div>\n                    <div className=\"message-preview\">{message.content}</div>\n                </div>\n                <div className=\"message-actions\">\n                    <button className=\"star-btn\" onClick={(e) => {\n                        e.stopPropagation();\n                        // Implement starring functionality\n                    }}>\n                        <Star size={16} className={message.starred ? 'starred' : ''} />\n                    </button>\n                    {activeCategory === 'drafts' ? (\n                        <button className=\"restore-btn\" onClick={(e) => {\n                            e.stopPropagation();\n                            handleRestoreMessage(message._id);\n                        }}>\n                            <Archive size={16} />\n                        </button>\n                    ) : null}\n                    <button className=\"delete-btn\" onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteMessage(message._id);\n                    }}>\n                        <Trash2 size={16} />\n                    </button>\n                </div>\n            </div>\n        ));\n    };\n\n    const handleSelectMessage = async (message) => {\n        try {\n            const response = await axios.get(`/api/messages/${message._id}`);\n            \n            // Only mark as read if it's an inbox message and unread\n            if (activeCategory === 'inbox' && !message.read) {\n                await axios.put(`/api/messages/${message._id}/read`);\n                // Update the message in the local state\n                setMessages(messages.map(m => m._id === message._id ? { ...m, read: true } : m));\n                // Update notification count\n                updateUnreadCount();\n            }\n            \n            setSelectedMessage(response.data);\n            // Fetch thread messages when selecting a message\n            await fetchThreadMessages(response.data.threadId || response.data._id);\n        } catch (error) {\n            console.error('Error fetching message details:', error);\n            alert('Failed to load message details. Please try again.');\n        }\n    };\n\n    const handleDownloadAttachment = async (messageId, filename) => {\n        try {\n            const response = await axios.get(`/api/messages/${messageId}/attachment`, {\n                responseType: 'blob',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/octet-stream'\n                }\n            });\n            const blob = new Blob([response.data], { type: response.headers['content-type'] });\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', filename);\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n            window.URL.revokeObjectURL(url);\n        } catch (error) {\n            console.error('Error downloading attachment:', error);\n            if (error.response) {\n                console.error('Error response:', error.response.data);\n            }\n            alert('Failed to download attachment. Please try again.');\n        }\n    };\n\n    const renderMessageDetail = () => {\n        if (!selectedMessage) return null;\n        return (\n            <div className=\"message-detail\">\n                <h3>{selectedMessage.subject}</h3>\n                <div className=\"message-info\">\n                    <span>From: {activeCategory === 'inbox' ? selectedMessage.sender.username : 'You'}</span>\n                    <span>To: {activeCategory === 'inbox' ? 'You' : selectedMessage.recipient.username}</span>\n                    <span>Date: {new Date(selectedMessage.createdAt).toLocaleString()}</span>\n                </div>\n                <div className=\"message-content\">{selectedMessage.content}</div>\n                {selectedMessage.attachment && (\n                    <div className=\"attachment\">\n                        <strong>Attachment:</strong> \n                        <button \n                            onClick={() => handleDownloadAttachment(selectedMessage._id, selectedMessage.attachment.filename)}\n                            className=\"download-btn\"\n                        >\n                            <File size={16} />\n                            {selectedMessage.attachment.filename}\n                        </button>\n                    </div>\n                )}\n                {activeCategory === 'inbox' && (\n                    <div className=\"message-actions\">\n                        <button className=\"reply-btn\" onClick={() => setShowReplyModal(true)}>\n                            Reply\n                        </button>\n                        <button \n                            className=\"quick-reply-btn\"\n                            onClick={() => setShowQuickReplyOptions(!showQuickReplyOptions)}\n                        >\n                            Quick Reply\n                        </button>\n                    </div>\n                )}\n                {renderQuickReplyOptions()}\n                {renderThreadView()}\n            </div>\n        );\n    };\n\n    const handleNewMessage = () => {\n        setShowNewMessageModal(true);\n    };\n\n    const closeNewMessageModal = () => {\n        setShowNewMessageModal(false);\n        setNewMessage({ to: '', subject: '', content: '', attachment: null });\n    };\n\n    const handleNewMessageChange = (e) => {\n        const { name, value } = e.target;\n        setNewMessage(prev => ({ ...prev, [name]: value }));\n    };\n\n    const handleFileChange = (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            if (file.size > 5 * 1024 * 1024) {\n                alert('File size exceeds 5MB limit.');\n                return;\n            }\n            setNewMessage(prev => ({ ...prev, attachment: file }));\n        }\n    };\n\n    const triggerFileInput = () => {\n        fileInputRef.current.click();\n    };\n\n    const renderAttachmentPreview = () => {\n        if (!newMessage.attachment) return null;\n\n        const isImage = newMessage.attachment.type.startsWith('image/');\n        return (\n            <div className=\"attachment-preview\">\n                {isImage ? (\n                    <img src={URL.createObjectURL(newMessage.attachment)} alt=\"Attachment preview\" />\n                ) : (\n                    <div className=\"file-preview\">\n                        <File size={24} />\n                        <span>{newMessage.attachment.name}</span>\n                    </div>\n                )}\n                <button onClick={() => setNewMessage(prev => ({ ...prev, attachment: null }))}>Remove</button>\n            </div>\n        );\n    };\n\n    const sendNewMessage = async () => {\n        try {\n            const formData = new FormData();\n            formData.append('recipient', newMessage.to);\n            formData.append('subject', newMessage.subject);\n            formData.append('content', newMessage.content);\n            if (newMessage.attachment) {\n                formData.append('attachment', newMessage.attachment);\n            }\n\n            const response = await axios.post('/api/messages', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            \n            console.log('Message sent successfully:', response.data);\n            await fetchMessages(); // This will update the current category (inbox, sent, or drafts)\n            if (activeCategory === 'sent') {\n                setActiveCategory('sent'); // This will trigger a re-fetch of sent messages\n            }\n            closeNewMessageModal();\n            \n            // Ensure notification count is updated after sending a message\n            updateUnreadCount();\n        } catch (error) {\n            console.error('Error sending message:', error);\n            alert('Failed to send message. Please try again.');\n        }\n    };\n\n    const renderNewMessageModal = () => {\n        if (!showNewMessageModal) return null;\n        return (\n            <div className=\"new-message-modal\">\n                <div className=\"new-message-content\">\n                    <div className=\"new-message-header\">\n                        <h3>New Message</h3>\n                        <button onClick={closeNewMessageModal} className=\"close-btn\">\n                            <X size={18} />\n                        </button>\n                    </div>\n                    <div className=\"new-message-form\">\n                        <input\n                            type=\"text\"\n                            name=\"to\"\n                            placeholder=\"To\"\n                            value={newMessage.to}\n                            onChange={handleNewMessageChange}\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"subject\"\n                            placeholder=\"Subject\"\n                            value={newMessage.subject}\n                            onChange={handleNewMessageChange}\n                        />\n                        <textarea\n                            name=\"content\"\n                            placeholder=\"Message\"\n                            value={newMessage.content}\n                            onChange={handleNewMessageChange}\n                        />\n                        <div className=\"attachment-section\">\n                            <button onClick={triggerFileInput} className=\"attachment-btn\">\n                                <Paperclip size={18} />\n                                Attach File\n                            </button>\n                            <input\n                                type=\"file\"\n                                ref={fileInputRef}\n                                onChange={handleFileChange}\n                                style={{ display: 'none' }}\n                            />\n                            {renderAttachmentPreview()}\n                        </div>\n                        <button onClick={sendNewMessage} className=\"send-btn\">Send</button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    const handleReplySubmit = async () => {\n        try {\n            const formData = new FormData();\n            formData.append('content', replyMessage.content);\n            if (replyMessage.attachment) {\n                formData.append('attachment', replyMessage.attachment);\n            }\n\n            const response = await axios.post(\n                `/api/messages/${selectedMessage._id}/reply`,\n                formData,\n                {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    }\n                }\n            );\n\n            // Fetch updated thread messages\n            await fetchThreadMessages(selectedMessage.threadId || selectedMessage._id);\n            \n            // Close modal and reset form\n            setShowReplyModal(false);\n            setReplyMessage({ content: '', attachment: null });\n            \n            // Update message list\n            fetchMessages();\n        } catch (error) {\n            console.error('Error sending reply:', error);\n            alert('Failed to send reply. Please try again.');\n        }\n    };\n\n    const fetchThreadMessages = async (threadId) => {\n        try {\n            const response = await axios.get(`/api/messages/${threadId}/thread`);\n            setThreadMessages(response.data);\n        } catch (error) {\n            console.error('Error fetching thread messages:', error);\n        }\n    };\n\n    const renderReplyModal = () => {\n        if (!showReplyModal || !selectedMessage) return null;\n\n        const renderAttachmentPreview = () => {\n            if (!replyMessage.attachment) return null;\n\n            const isImage = replyMessage.attachment.type.startsWith('image/');\n            return (\n                <div className=\"attachment-preview\">\n                    {isImage ? (\n                        <img \n                            src={URL.createObjectURL(replyMessage.attachment)} \n                            alt=\"Attachment preview\" \n                        />\n                    ) : (\n                        <div className=\"file-preview\">\n                            <div className=\"file-preview-info\">\n                                <File size={24} />\n                                <span>{replyMessage.attachment.name}</span>\n                            </div>\n                        </div>\n                    )}\n                    <button \n                        className=\"remove-attachment\"\n                        onClick={() => setReplyMessage(prev => ({ ...prev, attachment: null }))}\n                    >\n                        <X size={16} />\n                        Remove\n                    </button>\n                </div>\n            );\n        };\n\n        return (\n            <div className=\"reply-modal\">\n                <div className=\"reply-content\">\n                    <div className=\"new-message-header\">\n                        <h3>Reply to Message</h3>\n                        <button onClick={() => setShowReplyModal(false)} className=\"close-btn\">\n                            <X size={18} />\n                        </button>\n                    </div>\n                    <div className=\"quoted-message\">\n                        <strong>{selectedMessage.sender.username} wrote:</strong>\n                        <p>{selectedMessage.content}</p>\n                    </div>\n                    <div className=\"new-message-form\">\n                        <textarea\n                            name=\"content\"\n                            placeholder=\"Write your reply...\"\n                            value={replyMessage.content}\n                            onChange={(e) => setReplyMessage(prev => ({ ...prev, content: e.target.value }))}\n                        />\n                        <div className=\"attachment-section\">\n                            <button onClick={triggerFileInput} className=\"attachment-btn\">\n                                <Paperclip size={18} />\n                                Attach File\n                            </button>\n                            <input\n                                type=\"file\"\n                                ref={fileInputRef}\n                                onChange={(e) => {\n                                    const file = e.target.files[0];\n                                    if (file) setReplyMessage(prev => ({ ...prev, attachment: file }));\n                                }}\n                                style={{ display: 'none' }}\n                            />\n                            {renderAttachmentPreview()}\n                        </div>\n                        <button onClick={handleReplySubmit} className=\"send-btn\">Send Reply</button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    const handleQuickReply = async (type) => {\n        try {\n            const payload = {\n                type,\n                customMessage: type === 'custom' ? customQuickReply : undefined\n            };\n\n            await axios.post(`/api/messages/${selectedMessage._id}/quick-reply`, payload);\n            \n            // Refresh thread messages\n            await fetchThreadMessages(selectedMessage.threadId || selectedMessage._id);\n            \n            // Close quick reply options\n            setShowQuickReplyOptions(false);\n            setCustomQuickReply('');\n            \n            // Update message list\n            fetchMessages();\n        } catch (error) {\n            console.error('Error sending quick reply:', error);\n            alert('Failed to send quick reply. Please try again.');\n        }\n    };\n\n    const renderQuickReplyOptions = () => {\n        if (!showQuickReplyOptions) return null;\n        \n        return (\n            <div className=\"quick-reply-options\">\n                <button onClick={() => handleQuickReply('acknowledge')}>\n                    Acknowledge\n                </button>\n                <button onClick={() => handleQuickReply('approve')}>\n                    Approve\n                </button>\n                <button onClick={() => handleQuickReply('reject')}>\n                    Reject\n                </button>\n                <div className=\"custom-quick-reply\">\n                    <input\n                        type=\"text\"\n                        value={customQuickReply}\n                        onChange={(e) => setCustomQuickReply(e.target.value)}\n                        placeholder=\"Custom quick reply...\"\n                    />\n                    <button \n                        onClick={() => handleQuickReply('custom')}\n                        disabled={!customQuickReply.trim()}\n                    >\n                        Send\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    const renderThreadView = () => {\n        if (!threadMessages.length) return null;\n\n        return (\n            <div className=\"thread-view\">\n                <div className=\"thread-header\">\n                    <h4>Message Thread ({threadMessages.length})</h4>\n                    <button \n                        className=\"toggle-thread-btn\"\n                        onClick={() => setIsThreadCollapsed(!isThreadCollapsed)}\n                    >\n                        {isThreadCollapsed ? 'Expand' : 'Collapse'}\n                    </button>\n                </div>\n                \n                {!isThreadCollapsed && (\n                    <div className=\"thread-messages\">\n                        {threadMessages.map((msg, index) => (\n                            <div \n                                key={msg._id} \n                                className={`thread-message ${msg._id === selectedMessage._id ? 'current' : ''}`}\n                            >\n                                <div className=\"thread-message-header\">\n                                    <strong>{msg.sender.username}</strong>\n                                    <span>{new Date(msg.createdAt).toLocaleString()}</span>\n                                </div>\n                                <div className=\"message-content\">\n                                    {msg.content}\n                                </div>\n                                {msg.isQuickReply && (\n                                    <div className=\"quick-reply-badge\">\n                                        Quick Reply: {msg.quickReplyType}\n                                    </div>\n                                )}\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"messaging-container\">\n            <div className=\"messaging-sidebar\">\n                <button className=\"new-message-btn\" onClick={handleNewMessage}>\n                    <Edit size={18} />\n                    New Message\n                </button>\n                <div className=\"message-categories\">\n                    <button\n                        className={`category-btn ${activeCategory === 'inbox' ? 'active' : ''}`}\n                        onClick={() => setActiveCategory('inbox')}\n                    >\n                        <Inbox size={18} />\n                        Inbox\n                    </button>\n                    <button\n                        className={`category-btn ${activeCategory === 'sent' ? 'active' : ''}`}\n                        onClick={() => setActiveCategory('sent')}\n                    >\n                        <Send size={18} />\n                        Sent\n                    </button>\n                    <button\n                        className={`category-btn ${activeCategory === 'drafts' ? 'active' : ''}`}\n                        onClick={() => setActiveCategory('drafts')}\n                    >\n                        <Archive size={18} />\n                        Drafts\n                    </button>\n                </div>\n            </div>\n            <div className=\"messaging-content\">\n                <div className=\"messaging-header\">\n                    <h2>{activeCategory.charAt(0).toUpperCase() + activeCategory.slice(1)}</h2>\n                    <SearchBar \n                        onSearch={(term) => setSearchTerm(term)} \n                        className=\"messaging-search\" \n                    />\n                </div>\n                <div className=\"message-list-container\">\n                    <div className=\"message-list\">\n                        {renderMessageList()}\n                    </div>\n                    <div className=\"message-detail-container\">\n                        {renderMessageDetail()}\n                    </div>\n                </div>\n            </div>\n            {renderNewMessageModal()}\n            {renderReplyModal()}\n        </div>\n    );\n};\n\nexport default Messaging;\n","C:\\Users\\Tech Guru\\Desktop\\Javascript\\social\\frontend\\src\\context\\NotificationContext.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":12,"column":21,"nodeType":"136","messageId":"137","endLine":12,"endColumn":31},{"ruleId":"138","severity":1,"message":"139","line":40,"column":8,"nodeType":"140","endLine":40,"endColumn":10,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":61,"column":43,"nodeType":"136","endLine":61,"endColumn":50},{"ruleId":"138","severity":1,"message":"143","line":64,"column":8,"nodeType":"140","endLine":64,"endColumn":28,"suggestions":"144"},{"ruleId":"138","severity":1,"message":"145","line":38,"column":8,"nodeType":"140","endLine":38,"endColumn":14,"suggestions":"146"},{"ruleId":"138","severity":1,"message":"147","line":57,"column":8,"nodeType":"140","endLine":57,"endColumn":21,"suggestions":"148"},{"ruleId":"134","severity":1,"message":"149","line":73,"column":19,"nodeType":"136","messageId":"137","endLine":73,"endColumn":27},{"ruleId":"134","severity":1,"message":"149","line":175,"column":19,"nodeType":"136","messageId":"137","endLine":175,"endColumn":27},{"ruleId":"150","severity":1,"message":"151","line":303,"column":37,"nodeType":"152","endLine":308,"endColumn":39},{"ruleId":"138","severity":1,"message":"153","line":27,"column":8,"nodeType":"140","endLine":27,"endColumn":38,"suggestions":"154"},{"ruleId":"134","severity":1,"message":"155","line":5,"column":40,"nodeType":"136","messageId":"137","endLine":5,"endColumn":45},{"ruleId":"134","severity":1,"message":"156","line":20,"column":12,"nodeType":"136","messageId":"137","endLine":20,"endColumn":35},{"ruleId":"138","severity":1,"message":"157","line":53,"column":8,"nodeType":"140","endLine":53,"endColumn":10,"suggestions":"158"},{"ruleId":"134","severity":1,"message":"159","line":12,"column":12,"nodeType":"136","messageId":"137","endLine":12,"endColumn":23},{"ruleId":"134","severity":1,"message":"160","line":2,"column":37,"nodeType":"136","messageId":"137","endLine":2,"endColumn":43},{"ruleId":"138","severity":1,"message":"161","line":27,"column":8,"nodeType":"140","endLine":27,"endColumn":24,"suggestions":"162"},{"ruleId":"134","severity":1,"message":"149","line":359,"column":19,"nodeType":"136","messageId":"137","endLine":359,"endColumn":27},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],"no-unused-vars","'setUpdater' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'hasMore'. Either include it or remove the dependency array.","ArrayExpression",["165"],"The ref value 'loader.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'loader.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'handleObserver'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.",["167"],"React Hook useEffect has a missing dependency: 'post'. Either include it or remove the dependency array.",["168"],"'response' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'filterThreads'. Either include it or remove the dependency array.",["169"],"'Award' is defined but never used.","'updateNotificationCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchPolls'. Either include it or remove the dependency array.",["170"],"'currentUser' is assigned a value but never used.","'Search' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [hasMore]",{"range":"186","text":"187"},"Update the dependencies array to be: [handleObserver, hasMore, isLoading]",{"range":"188","text":"189"},"Update the dependencies array to be: [fetchComments, post]",{"range":"190","text":"191"},"Update the dependencies array to be: [post, post.userId]",{"range":"192","text":"193"},"Update the dependencies array to be: [threads, searchTerm, filters, filterThreads]",{"range":"194","text":"195"},"Update the dependencies array to be: [fetchPolls]",{"range":"196","text":"197"},"Update the dependencies array to be: [activeCategory, fetchMessages]",{"range":"198","text":"199"},[1650,1652],"[hasMore]",[2200,2220],"[handleObserver, hasMore, isLoading]",[1774,1780],"[fetchComments, post]",[2456,2469],"[post, post.userId]",[965,995],"[threads, searchTerm, filters, filterThreads]",[2133,2135],"[fetchPolls]",[1392,1408],"[activeCategory, fetchMessages]"]